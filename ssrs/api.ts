/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
require("es6-promise").polyfill();
import "portable-fetch/fetch-npm-browserify";
let portableFetch = window.fetch;
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost/reports/api/v2.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * An object that specifies an allowed action on a CatalogItem.
 * @export
 * @interface AllowedAction
 */
export interface AllowedAction {
  /**
   * The allowed action.
   * @type {string}
   * @memberof AllowedAction
   */
  Action?: string;
}

/**
 * Result of bulk operations like MoveItems and DeleteItems
 * @export
 * @interface BulkOperationsResult
 */
export interface BulkOperationsResult {
  /**
   *
   * @type {Array<string>}
   * @memberof BulkOperationsResult
   */
  FailedOperations?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof BulkOperationsResult
   */
  HasErrors?: boolean;
}

/**
 * An object that specifies options for a data cache.
 * @export
 * @interface CacheOptions
 */
export interface CacheOptions {
  /**
   *
   * @type {ItemExecutionType}
   * @memberof CacheOptions
   */
  ExecutionType?: ItemExecutionType;
  /**
   *
   * @type {ExpirationReference}
   * @memberof CacheOptions
   */
  Expiration?: ExpirationReference;
}

/**
 * An object that specifies a plan for data cache refresh. The plan can be stored and re-used by multiple CatalogItems.
 * @export
 * @interface CacheRefreshPlan
 */
export interface CacheRefreshPlan {
  /**
   * A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  Id?: string;
  /**
   * A string value that specifies the owner of the CacheRefreshPlan.
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  Owner?: string;
  /**
   * A string value that contains descriptive text about the CacheRefreshPlan.
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  Description?: string;
  /**
   * A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  CatalogItemPath?: string;
  /**
   * A string value that specifies which EventType to use for logging.
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  EventType?: string;
  /**
   *
   * @type {ScheduleReference}
   * @memberof CacheRefreshPlan
   */
  Schedule?: ScheduleReference;
  /**
   * A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.
   * @type {Date}
   * @memberof CacheRefreshPlan
   */
  LastRunTime?: Date;
  /**
   * A string value that contains the network username of the last user to modify the CacheRefreshPlan.
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  LastStatus?: string;
  /**
   * A string value that contains the network user name of the last user to modify the CacheRefreshPlan
   * @type {string}
   * @memberof CacheRefreshPlan
   */
  ModifiedBy?: string;
  /**
   * A string value that contains the date-time of the last modification to the CacheRefreshPlan.
   * @type {Date}
   * @memberof CacheRefreshPlan
   */
  ModifiedDate?: Date;
  /**
   * An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.
   * @type {Array<ParameterValue>}
   * @memberof CacheRefreshPlan
   */
  ParameterValues?: Array<ParameterValue>;
}

/**
 * CatalogItem is an abstract type that contains the common properties of all the types of CatalogItems. Hence, it is the base type from which the other CatalogItem types are derived.
 * @export
 * @interface CatalogItem
 */
export interface CatalogItem {
  /**
   * A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.
   * @type {string}
   * @memberof CatalogItem
   */
  Id?: string;
  /**
   * A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.
   * @type {string}
   * @memberof CatalogItem
   */
  Name?: string;
  /**
   * A string value that contains descriptive text about the CatalogItem.
   * @type {string}
   * @memberof CatalogItem
   */
  Description?: string;
  /**
   * A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.
   * @type {string}
   * @memberof CatalogItem
   */
  Path?: string;
  /**
   *
   * @type {CatalogItemType}
   * @memberof CatalogItem
   */
  Type?: CatalogItemType;
  /**
   * A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.
   * @type {boolean}
   * @memberof CatalogItem
   */
  Hidden?: boolean;
  /**
   * An Int64 value that contains the size of the CatalogItem in bytes.
   * @type {number}
   * @memberof CatalogItem
   */
  Size?: number;
  /**
   * A string value that contains the network user name of the last user to modify the CatalogItem.
   * @type {string}
   * @memberof CatalogItem
   */
  ModifiedBy?: string;
  /**
   * A string value that contains the date-time of the last modification to the CatalogItem.
   * @type {Date}
   * @memberof CatalogItem
   */
  ModifiedDate?: Date;
  /**
   * A string value that represents the network user name of the user who originally created the CatalogItem.
   * @type {string}
   * @memberof CatalogItem
   */
  CreatedBy?: string;
  /**
   * A string that contains the date-time of the creation of the CatalogItem.
   * @type {Date}
   * @memberof CatalogItem
   */
  CreatedDate?: Date;
  /**
   * A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.
   * @type {string}
   * @memberof CatalogItem
   */
  ParentFolderId?: string;
  /**
   * A string value that contains a SOAP MIME-type that is associated with the CatalogItem.
   * @type {string}
   * @memberof CatalogItem
   */
  ContentType?: string;
  /**
   * A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.
   * @type {string}
   * @memberof CatalogItem
   */
  Content?: string;
  /**
   * A boolean value that specifies whether the CatalogItem is designated as a Favorite.
   * @type {boolean}
   * @memberof CatalogItem
   */
  IsFavorite?: boolean;
}

/**
 * An enumeration of values that specifies the type of the CatalogItem.
 * @export
 * @enum {string}
 */
export enum CatalogItemType {
  Unknown = <any>"Unknown",
  Folder = <any>"Folder",
  Report = <any>"Report",
  DataSource = <any>"DataSource",
  DataSet = <any>"DataSet",
  Component = <any>"Component",
  Resource = <any>"Resource",
  Kpi = <any>"Kpi",
  MobileReport = <any>"MobileReport",
  LinkedReport = <any>"LinkedReport",
  ReportModel = <any>"ReportModel",
}

/**
 * An object that specifies a comment that is attached to a CatalogItem.
 * @export
 * @interface Comment
 */
export interface Comment {
  /**
   * A unique UUID value that specifies the identifier of the comment.
   * @type {string}
   * @memberof Comment
   */
  Id?: string;
  /**
   * A unique UUID value that specifies the identifier of the CatalogItem item to which the comment is attached.
   * @type {string}
   * @memberof Comment
   */
  ItemId?: string;
  /**
   *  A string value that represents the user who created the comment item.
   * @type {string}
   * @memberof Comment
   */
  UserName?: string;
  /**
   * A unique UUID value that specifies the identifier of the thread of the comment. A comment thread can be used to group comments that are a response to one another in one grouping.
   * @type {string}
   * @memberof Comment
   */
  ThreadId?: string;
  /**
   * A string value that specifies the server path to an attachment that is part of the comment.
   * @type {string}
   * @memberof Comment
   */
  AttachmentPath?: string;
  /**
   * A string value that contains the text of the comment.
   * @type {string}
   * @memberof Comment
   */
  Text?: string;
  /**
   * A string that contains the date-time of the creation of the comment.
   * @type {Date}
   * @memberof Comment
   */
  CreatedDate?: Date;
  /**
   * A string value that contains the date-time of the last modification to the comment.
   * @type {Date}
   * @memberof Comment
   */
  ModifiedDate?: Date;
}

/**
 * This object holds credentials for connections to an external data source. The object is stored on the Report Server for later retrieval and use. NOTE: This object represents a security risk as its properties can be seen in plain text over the HTTP protocol; HTTPS is recommended.
 * @export
 * @interface CredentialsStoredInServer
 */
export interface CredentialsStoredInServer {
  /**
   * A string value that contains the user name to be used to connect to an external data source.
   * @type {string}
   * @memberof CredentialsStoredInServer
   */
  UserName?: string;
  /**
   * A string value that contains the password to be used to connect to an external data source.
   * @type {string}
   * @memberof CredentialsStoredInServer
   */
  Password?: string;
  /**
   * A boolean value that indicates whether the supplied credentials should be used as Windows credentials.
   * @type {boolean}
   * @memberof CredentialsStoredInServer
   */
  UseAsWindowsCredentials?: boolean;
  /**
   * A boolean value that indicates whether the session should impersonate the user for the supplied credentials.
   * @type {boolean}
   * @memberof CredentialsStoredInServer
   */
  ImpersonateAuthenticatedUser?: boolean;
}

/**
 * An object that contains information about prompting a user for credentials for connections to an external data source.
 * @export
 * @interface CredentialsSuppliedByUser
 */
export interface CredentialsSuppliedByUser {
  /**
   * A string value that contains text used to prompt a user to supply credentials for connections to an external data source.
   * @type {string}
   * @memberof CredentialsSuppliedByUser
   */
  DisplayText?: string;
  /**
   * A boolean value that indicates whether credentials the user supplies in a prompt should be used as Windows credentials.
   * @type {boolean}
   * @memberof CredentialsSuppliedByUser
   */
  UseAsWindowsCredentials?: boolean;
}

/**
 * Represents the intervals at which a scheduled report runs. Intervals are specified in days.
 * @export
 * @interface DailyRecurrence
 */
export interface DailyRecurrence {
  /**
   * An Int32 value representing interval in days.
   * @type {number}
   * @memberof DailyRecurrence
   */
  DaysInterval?: number;
}

/**
 *
 * @export
 * @interface DataSet
 */
export interface DataSet extends CatalogItem {
  /**
   * A boolean value that indicates whether the dataset definition contains parameters.
   * @type {boolean}
   * @memberof DataSet
   */
  HasParameters?: boolean;
  /**
   * An Int32 value that indicates the query execution timeout in seconds.
   * @type {number}
   * @memberof DataSet
   */
  QueryExecutionTimeOut?: number;
}

/**
 *
 * @export
 * @interface DataSetAggregateValueParameters
 */
export interface DataSetAggregateValueParameters {
  /**
   *
   * @type {Array<DataSetParameter>}
   * @memberof DataSetAggregateValueParameters
   */
  Parameters?: Array<DataSetParameter>;
}

/**
 *
 * @export
 * @interface DataSetColumns
 */
export interface DataSetColumns {
  /**
   *
   * @type {string}
   * @memberof DataSetColumns
   */
  Name?: string;
  /**
   *
   * @type {string}
   * @memberof DataSetColumns
   */
  Type?: string;
}

/**
 *
 * @export
 * @interface DataSetData
 */
export interface DataSetData {
  /**
   *
   * @type {string}
   * @memberof DataSetData
   */
  Name?: string;
  /**
   *
   * @type {Array<Array<string>>}
   * @memberof DataSetData
   */
  Rows?: Array<Array<string>>;
  /**
   *
   * @type {Array<DataSetColumns>}
   * @memberof DataSetData
   */
  Columns?: Array<DataSetColumns>;
}

/**
 *
 * @export
 * @interface DataSetDataParameters
 */
export interface DataSetDataParameters {
  /**
   *
   * @type {Array<DataSetParameter>}
   * @memberof DataSetDataParameters
   */
  Parameters?: Array<DataSetParameter>;
}

/**
 * An object that represents a field in a DataSet.
 * @export
 * @interface DataSetField
 */
export interface DataSetField {
  /**
   *
   * @type {string}
   * @memberof DataSetField
   */
  Name?: string;
  /**
   *
   * @type {ReportParameterType}
   * @memberof DataSetField
   */
  DataType?: ReportParameterType;
}

/**
 * An object that contains additional dataset properties for the MobileReportManifest
 * @export
 * @interface DataSetItem
 */
export interface DataSetItem {
  /**
   * The time unit for the DataSetItem. The possible values for this string are the following: 'Year', 'Quarter', 'Month', 'Weekday', 'Hour'.
   * @type {string}
   * @memberof DataSetItem
   */
  TimeUnit?: string;
  /**
   * A string value that specifies the name of the column in the DataSetItem that represents date and time.
   * @type {string}
   * @memberof DataSetItem
   */
  DateTimeColumn?: string;
}

/**
 * An object that contains the name and value for a parameter to be used when executing a DataSet.
 * @export
 * @interface DataSetParameter
 */
export interface DataSetParameter {
  /**
   * The name of the parameter.
   * @type {string}
   * @memberof DataSetParameter
   */
  Name?: string;
  /**
   * The value to set for the parameter.
   * @type {string}
   * @memberof DataSetParameter
   */
  Value?: string;
}

/**
 * An object that contains information about a parameter in a DataSet.
 * @export
 * @interface DataSetParameterInfo
 */
export interface DataSetParameterInfo {
  /**
   * The name of the parameter.
   * @type {string}
   * @memberof DataSetParameterInfo
   */
  Name?: string;
  /**
   * The default value for the parameter.
   * @type {string}
   * @memberof DataSetParameterInfo
   */
  DefaultValue?: string;
  /**
   * Specifies whether the parameter can be null.
   * @type {boolean}
   * @memberof DataSetParameterInfo
   */
  Nullable?: boolean;
  /**
   *
   * @type {ReportParameterType}
   * @memberof DataSetParameterInfo
   */
  DataType?: ReportParameterType;
  /**
   * Specifies whether the parameter is an expression.
   * @type {boolean}
   * @memberof DataSetParameterInfo
   */
  IsExpression?: boolean;
  /**
   * Specifies whether the parameter contains multiple values.
   * @type {boolean}
   * @memberof DataSetParameterInfo
   */
  IsMultiValued?: boolean;
}

/**
 * An object that reprents the schema for a DataSet
 * @export
 * @interface DataSetSchema
 */
export interface DataSetSchema {
  /**
   * The name of the DataSet.
   * @type {string}
   * @memberof DataSetSchema
   */
  Name?: string;
  /**
   * The fields of the DataSet.
   * @type {Array<DataSetField>}
   * @memberof DataSetSchema
   */
  Fields?: Array<DataSetField>;
  /**
   * The parameters for the DataSet.
   * @type {Array<DataSetParameterInfo>}
   * @memberof DataSetSchema
   */
  Parameters?: Array<DataSetParameterInfo>;
}

/**
 *
 * @export
 * @interface DataSource
 */
export interface DataSource extends CatalogItem {
  /**
   * A Boolean value that specifies whether the DataSource is enabled for use.
   * @type {boolean}
   * @memberof DataSource
   */
  IsEnabled?: boolean;
  /**
   * A string value that can be passed to a data source in order to begin the process of establishing connection.
   * @type {string}
   * @memberof DataSource
   */
  ConnectionString?: string;
  /**
   * DataSource extension such as 'SQL'.
   * @type {string}
   * @memberof DataSource
   */
  DataSourceType?: string;
  /**
   * Indicates whether the original connection string for the data source was expression-based.
   * @type {boolean}
   * @memberof DataSource
   */
  IsOriginalConnectionStringExpressionBased?: boolean;
  /**
   * Specifies whether the original connection string is overridden.
   * @type {boolean}
   * @memberof DataSource
   */
  IsConnectionStringOverridden?: boolean;
  /**
   *
   * @type {CredentialsSuppliedByUser}
   * @memberof DataSource
   */
  CredentialsByUser?: CredentialsSuppliedByUser;
  /**
   *
   * @type {CredentialsStoredInServer}
   * @memberof DataSource
   */
  CredentialsInServer?: CredentialsStoredInServer;
  /**
   * Indicates whether this is a reference to a shared data source or an embedded data source.
   * @type {boolean}
   * @memberof DataSource
   */
  IsReference?: boolean;
  /**
   *
   * @type {Subscription}
   * @memberof DataSource
   */
  Subscriptions?: Subscription;
}

/**
 * Represents the result of testing a DataSource connection
 * @export
 * @interface DataSourceCheckResult
 */
export interface DataSourceCheckResult {
  /**
   *
   * @type {boolean}
   * @memberof DataSourceCheckResult
   */
  IsSuccessful?: boolean;
  /**
   *
   * @type {string}
   * @memberof DataSourceCheckResult
   */
  ErrorMessage?: string;
}

/**
 * Represents the days of the week on which a scheduled report runs.
 * @export
 * @interface DaysOfWeekSelector
 */
export interface DaysOfWeekSelector {
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Sunday?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Monday?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Tuesday?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Wednesday?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Thursday?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Friday?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DaysOfWeekSelector
   */
  Saturday?: boolean;
}

/**
 *
 * @export
 * @interface DeleteItemsRequest
 */
export interface DeleteItemsRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof DeleteItemsRequest
   */
  CatalogItemPaths?: Array<string>;
}

/**
 * An object that specifies the type of the target of a drillthrough operation.
 * @export
 * @interface DrillthroughTarget
 */
export interface DrillthroughTarget {
  /**
   *
   * @type {DrillthroughTargetType}
   * @memberof DrillthroughTarget
   */
  DrillthroughTargetType?: DrillthroughTargetType;
}

/**
 * An enumeration of values that specify the available types for the target object of a drillthrough operation.
 * @export
 * @enum {string}
 */
export enum DrillthroughTargetType {
  Url = <any>"Url",
  CatalogItem = <any>"CatalogItem",
}

/**
 * An object that contains a specification for cache expiration, expressed either in minutes or by a schedule.
 * @export
 * @interface ExpirationReference
 */
export interface ExpirationReference {
  /**
   * Number of minutes until expiration.
   * @type {number}
   * @memberof ExpirationReference
   */
  Minutes?: number;
  /**
   *
   * @type {ScheduleReference}
   * @memberof ExpirationReference
   */
  Schedule?: ScheduleReference;
}

/**
 * An object that holds the definition of a Reporting Services extension.
 * @export
 * @interface Extension
 */
export interface Extension {
  /**
   *
   * @type {ExtensionType}
   * @memberof Extension
   */
  ExtensionType?: ExtensionType;
  /**
   * A string value that specifies the name for the Extension. This name will typically be displayed in the user interface.
   * @type {string}
   * @memberof Extension
   */
  Name?: string;
  /**
   * A string value that specifies a localized name for the Extension.
   * @type {string}
   * @memberof Extension
   */
  LocalizedName?: string;
  /**
   * A Boolean value that indicates if the Extension is visible. If false, the item will generally not appear in listings of available extensions.
   * @type {boolean}
   * @memberof Extension
   */
  Visible?: boolean;
}

/**
 * An object that contains the definition of a Reporting Services extension's parameter.
 * @export
 * @interface ExtensionParameter
 */
export interface ExtensionParameter {
  /**
   * A string value that specifies the name for the ExtensionParameter.
   * @type {string}
   * @memberof ExtensionParameter
   */
  Name?: string;
  /**
   * The name of the extension setting that is displayed to the user.
   * @type {string}
   * @memberof ExtensionParameter
   */
  DisplayName?: string;
  /**
   * Indicates whether the value is required.
   * @type {boolean}
   * @memberof ExtensionParameter
   */
  Required?: boolean;
  /**
   * Indicates whether the setting is read-only.
   * @type {boolean}
   * @memberof ExtensionParameter
   */
  ReadOnly?: boolean;
  /**
   * A string that represents the value of an extension parameter.
   * @type {string}
   * @memberof ExtensionParameter
   */
  Value?: string;
  /**
   * An error that describes a problem with the value of the setting.
   * @type {string}
   * @memberof ExtensionParameter
   */
  Error?: string;
  /**
   * Indicates whether the extension parameter value should be encrypted in the Report Server database.
   * @type {boolean}
   * @memberof ExtensionParameter
   */
  Encrypted?: boolean;
  /**
   * A Boolean value that indicates whether the ExtensionParameter is a password.
   * @type {boolean}
   * @memberof ExtensionParameter
   */
  IsPassword?: boolean;
  /**
   * A set of values that can be configured for the setting.
   * @type {Array<ValidValue>}
   * @memberof ExtensionParameter
   */
  ValidValues?: Array<ValidValue>;
  /**
   * A Boolean value that indicates whether the ValidValues property is null.
   * @type {boolean}
   * @memberof ExtensionParameter
   */
  ValidValuesIsNull?: boolean;
}

/**
 * An object that defines parameter values that are used for a Reporting Services extension.
 * @export
 * @interface ExtensionSettings
 */
export interface ExtensionSettings {
  /**
   * A string value that specifies the name of the Reporting Services extension that the settings in the object apply to.
   * @type {string}
   * @memberof ExtensionSettings
   */
  Extension?: string;
  /**
   *
   * @type {ParameterValue}
   * @memberof ExtensionSettings
   */
  ParameterValues?: ParameterValue;
}

/**
 * An enumeration of Reporting Services extension types.
 * @export
 * @enum {string}
 */
export enum ExtensionType {
  Delivery = <any>"Delivery",
  DeliveryUI = <any>"DeliveryUI",
  Render = <any>"Render",
  Data = <any>"Data",
  All = <any>"All",
}

/**
 * An object that a reference to a CatalogItem that the user has marked as a favorite.
 * @export
 * @interface FavoriteItem
 */
export interface FavoriteItem {
  /**
   * A unique UUID value that specifies the identifier of the CatalogItem that is marked as a favorite.
   * @type {string}
   * @memberof FavoriteItem
   */
  Id?: string;
  /**
   *
   * @type {CatalogItem}
   * @memberof FavoriteItem
   */
  Item?: CatalogItem;
}

/**
 *
 * @export
 * @interface Folder
 */
export interface Folder extends CatalogItem { }

/**
 * An object that contains history snapshot information.
 * @export
 * @interface HistorySnapshot
 */
export interface HistorySnapshot {
  /**
   * A unique UUID value that specifies the identifier of the CatalogItem for which this is a HistorySnapshot.
   * @type {string}
   * @memberof HistorySnapshot
   */
  Id?: string;
  /**
   * A string that contains the date-time of the execution of the HistorySnapshot. This, together with the Id of the CatalogItem, identifies this HistorySnapshot
   * @type {string}
   * @memberof HistorySnapshot
   */
  HistoryId?: string;
  /**
   * A string that contains the date-time of the creation of the HistorySnapshot.
   * @type {Date}
   * @memberof HistorySnapshot
   */
  CreationDate?: Date;
  /**
   * Size of the HistorySnapshot.
   * @type {number}
   * @memberof HistorySnapshot
   */
  Size?: number;
}

/**
 * An object that has a reference to a history snapshot option for a given catalog.
 * @export
 * @interface HistorySnapshotOptions
 */
export interface HistorySnapshotOptions {
  /**
   * The Id of the CatalogItem that this HistorySnapshotOptions belongs to.
   * @type {string}
   * @memberof HistorySnapshotOptions
   */
  CatalogItemId?: string;
  /**
   *
   * @type {ReportHistorySnapshotsOptions}
   * @memberof HistorySnapshotOptions
   */
  HistorySnapshotsOptions?: ReportHistorySnapshotsOptions;
}

/**
 * An enumeration that specifies whether the item's execution is with live data, cached data, or based on a data snapshot.
 * @export
 * @enum {string}
 */
export enum ItemExecutionType {
  Live = <any>"Live",
  Cache = <any>"Cache",
  Snapshot = <any>"Snapshot",
}

/**
 * An object that specifies the access policy for the item.
 * @export
 * @interface ItemPolicy
 */
export interface ItemPolicy {
  /**
   * A Boolean value that indicates whether the access policy is to be inherited from the item's parent item.
   * @type {boolean}
   * @memberof ItemPolicy
   */
  InheritParentPolicy?: boolean;
  /**
   * An array of objects of type Policy that specify the access policies to be applied to the item.
   * @type {Array<Policy>}
   * @memberof ItemPolicy
   */
  Policies?: Array<Policy>;
}

/**
 *
 * @export
 * @interface Kpi
 */
export interface Kpi extends CatalogItem {
  /**
   *
   * @type {KpiValueFormat}
   * @memberof Kpi
   */
  ValueFormat?: KpiValueFormat;
  /**
   *
   * @type {KpiVisualization}
   * @memberof Kpi
   */
  Visualization?: KpiVisualization;
  /**
   *
   * @type {DrillthroughTarget}
   * @memberof Kpi
   */
  DrillthroughTarget?: DrillthroughTarget;
  /**
   * A string value that specifies the currency. Must follow the ISO 4217 Currency codes standard.
   * @type {string}
   * @memberof Kpi
   */
  Currency?: string;
  /**
   *
   * @type {KpiValues}
   * @memberof Kpi
   */
  Values?: KpiValues;
  /**
   *
   * @type {KpiData}
   * @memberof Kpi
   */
  Data?: KpiData;
}

/**
 * An object that specifies the metadata source for the component parts of a KPI.
 * @export
 * @interface KpiData
 */
export interface KpiData {
  /**
   *
   * @type {KpiDataItem}
   * @memberof KpiData
   */
  Value?: KpiDataItem;
  /**
   *
   * @type {KpiDataItem}
   * @memberof KpiData
   */
  Goal?: KpiDataItem;
  /**
   *
   * @type {KpiDataItem}
   * @memberof KpiData
   */
  Status?: KpiDataItem;
  /**
   *
   * @type {KpiDataItem}
   * @memberof KpiData
   */
  TrendSet?: KpiDataItem;
}

/**
 * An enumeration value that specifies the type of the KPI data item.
 * @export
 * @interface KpiDataItem
 */
export interface KpiDataItem {
  /**
   *
   * @type {KpiDataItemType}
   * @memberof KpiDataItem
   */
  Type?: KpiDataItemType;
}

/**
 * An enumeration of values that specifies whether the KPI data item is static or shared.
 * @export
 * @enum {string}
 */
export enum KpiDataItemType {
  Static = <any>"Static",
  Shared = <any>"Shared",
}

/**
 * An enumeration of values that specify the available aggregations for KPIs.
 * @export
 * @enum {string}
 */
export enum KpiSharedDataItemAggregation {
  None = <any>"None",
  First = <any>"First",
  Last = <any>"Last",
  Min = <any>"Min",
  Max = <any>"Max",
  Average = <any>"Average",
  Sum = <any>"Sum",
}

/**
 * An enumeration of values that specifies the available formats for KPI values.
 * @export
 * @enum {string}
 */
export enum KpiValueFormat {
  General = <any>"General",
  Abbreviated = <any>"Abbreviated",
  DefaultCurrency = <any>"DefaultCurrency",
  DefaultCurrencyWithDecimals = <any>"DefaultCurrencyWithDecimals",
  AbbreviatedDefaultCurrency = <any>"AbbreviatedDefaultCurrency",
  Percent = <any>"Percent",
  PercentWithDecimals = <any>"PercentWithDecimals",
}

/**
 * An object that specifies the current set of values for a KPI.
 * @export
 * @interface KpiValues
 */
export interface KpiValues {
  /**
   * A string value that specifies the value of the Value Property for the KPI.
   * @type {string}
   * @memberof KpiValues
   */
  Value?: string;
  /**
   * A Double value that specifies the value of the Goal Property for the KPI.
   * @type {number}
   * @memberof KpiValues
   */
  Goal?: number;
  /**
   * A Double value that specifies the value of the Status Property for the KPI.
   * @type {number}
   * @memberof KpiValues
   */
  Status?: number;
  /**
   * An array of values that specifies the trendset for the KPI.
   * @type {Array<number>}
   * @memberof KpiValues
   */
  TrendSet?: Array<number>;
}

/**
 * An enumeration of values that specifies the available types of visualizations for a KPI.
 * @export
 * @enum {string}
 */
export enum KpiVisualization {
  None = <any>"None",
  Bar = <any>"Bar",
  Line = <any>"Line",
  Step = <any>"Step",
  Area = <any>"Area",
}

/**
 *
 * @export
 * @interface LinkedReport
 */
export interface LinkedReport extends CatalogItem {
  /**
   * A boolean value that indicates whether the LinkedReport has parameters.
   * @type {boolean}
   * @memberof LinkedReport
   */
  HasParameters?: boolean;
  /**
   *  A string value that specifies the path to the report item that this linked report is linked to.
   * @type {string}
   * @memberof LinkedReport
   */
  Link?: string;
}

/**
 *
 * @export
 * @interface ManifestItem
 */
export interface ManifestItem {
  /**
   * A unique UUID value that specifies the identifier by which this defined item can be referenced in requests or in other defined objects.
   * @type {string}
   * @memberof ManifestItem
   */
  Id?: string;
  /**
   * A string value that contains the complete URL for the defined item.
   * @type {string}
   * @memberof ManifestItem
   */
  Path?: string;
  /**
   * A string value that specifies the name for the item. This name will typically be displayed in the user interface.
   * @type {string}
   * @memberof ManifestItem
   */
  Name?: string;
  /**
   * A string value that contains an SHA256 hash of the contents of the item.
   * @type {string}
   * @memberof ManifestItem
   */
  Hash?: string;
}

/**
 * Represents the intervals at which a scheduled report runs. Intervals are specified in minutes.
 * @export
 * @interface MinuteRecurrence
 */
export interface MinuteRecurrence {
  /**
   * An Int32 value representing interval in minutes.
   * @type {number}
   * @memberof MinuteRecurrence
   */
  MinutesInterval?: number;
}

/**
 *
 * @export
 * @interface MobileReport
 */
export interface MobileReport extends CatalogItem {
  /**
   * A boolean value that indicates whether the MobileReport allows caching.
   * @type {boolean}
   * @memberof MobileReport
   */
  AllowCaching?: boolean;
  /**
   *
   * @type {MobileReportManifest}
   * @memberof MobileReport
   */
  Manifest?: MobileReportManifest;
  /**
   * A boolean value that indicates whether the MobileReport has shared DataSets associated with it.
   * @type {boolean}
   * @memberof MobileReport
   */
  HasSharedDataSets?: boolean;
}

/**
 * An object that contains the specification of the contents of a mobile report.
 * @export
 * @interface MobileReportManifest
 */
export interface MobileReportManifest {
  /**
   * An array of items of type ResourceGroup that specify the resources referenced in this MobileReport. A Resource is a generalized object and its content type is undefined.  A client must be able to understand the content returned in the Resource.
   * @type {Array<ResourceGroup>}
   * @memberof MobileReportManifest
   */
  Resources?: Array<ResourceGroup>;
  /**
   * An array of objects of type DataSetItem that specifies the DataSets referenced in this MobileReport.
   * @type {Array<DataSetItem>}
   * @memberof MobileReportManifest
   */
  DataSets?: Array<DataSetItem>;
  /**
   * An array of items of type ThumbnailItem that contains the Thumbnails associated with the MobileReport.
   * @type {Array<ThumbnailItem>}
   * @memberof MobileReportManifest
   */
  Thumbnails?: Array<ThumbnailItem>;
}

/**
 * An enumeration of values that specifies the known types for MobileReport Resources.
 * @export
 * @enum {string}
 */
export enum MobileReportResourceGroupType {
  Unknown = <any>"Unknown",
  Style = <any>"Style",
  Map = <any>"Map",
}

/**
 * An enumeration of values that specifies the available orientations for Thumbnails.
 * @export
 * @enum {string}
 */
export enum MobileReportThumbnailType {
  Unknown = <any>"Unknown",
  Landscape = <any>"Landscape",
  Portrait = <any>"Portrait",
}

/**
 * Represents the dates on which a scheduled report runs, typically by month, week, and day of the week.
 * @export
 * @interface MonthlyDOWRecurrence
 */
export interface MonthlyDOWRecurrence {
  /**
   *
   * @type {WeekNumberEnum}
   * @memberof MonthlyDOWRecurrence
   */
  WhichWeek?: WeekNumberEnum;
  /**
   * Specifies whether week is specified
   * @type {boolean}
   * @memberof MonthlyDOWRecurrence
   */
  WhichWeekSpecified?: boolean;
  /**
   *
   * @type {DaysOfWeekSelector}
   * @memberof MonthlyDOWRecurrence
   */
  DaysOfWeek?: DaysOfWeekSelector;
  /**
   *
   * @type {MonthsOfYearSelector}
   * @memberof MonthlyDOWRecurrence
   */
  MonthsOfYear?: MonthsOfYearSelector;
}

/**
 * Represents the days of the month on which a scheduled report runs.
 * @export
 * @interface MonthlyRecurrence
 */
export interface MonthlyRecurrence {
  /**
   * Specifies days for recurrence.
   * @type {string}
   * @memberof MonthlyRecurrence
   */
  Days?: string;
  /**
   *
   * @type {MonthsOfYearSelector}
   * @memberof MonthlyRecurrence
   */
  MonthsOfYear?: MonthsOfYearSelector;
}

/**
 * Represents the months of the year in which a scheduled report runs
 * @export
 * @interface MonthsOfYearSelector
 */
export interface MonthsOfYearSelector {
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  January?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  February?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  March?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  April?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  May?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  June?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  July?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  August?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  September?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  October?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  November?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MonthsOfYearSelector
   */
  December?: boolean;
}

/**
 *
 * @export
 * @interface MoveItemsRequest
 */
export interface MoveItemsRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof MoveItemsRequest
   */
  CatalogItemPaths?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof MoveItemsRequest
   */
  TargetPath?: string;
}

/**
 *
 * @export
 * @interface ODataAllowedActions
 */
export interface ODataAllowedActions {
  /**
   *
   * @type {string}
   * @memberof ODataAllowedActions
   */
  odata_context?: string;
  /**
   *
   * @type {Array<AllowedAction>}
   * @memberof ODataAllowedActions
   */
  value?: Array<AllowedAction>;
}

/**
 *
 * @export
 * @interface ODataCacheRefreshPlans
 */
export interface ODataCacheRefreshPlans {
  /**
   *
   * @type {string}
   * @memberof ODataCacheRefreshPlans
   */
  odata_context?: string;
  /**
   *
   * @type {Array<CacheRefreshPlan>}
   * @memberof ODataCacheRefreshPlans
   */
  value?: Array<CacheRefreshPlan>;
}

/**
 *
 * @export
 * @interface ODataCatalogItems
 */
export interface ODataCatalogItems {
  /**
   *
   * @type {string}
   * @memberof ODataCatalogItems
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataCatalogItems
   */
  odata_count?: number;
  /**
   *
   * @type {Array<CatalogItem>}
   * @memberof ODataCatalogItems
   */
  value?: Array<CatalogItem>;
}

/**
 *
 * @export
 * @interface ODataComments
 */
export interface ODataComments {
  /**
   *
   * @type {string}
   * @memberof ODataComments
   */
  odata_context?: string;
  /**
   *
   * @type {Array<Comment>}
   * @memberof ODataComments
   */
  value?: Array<Comment>;
}

/**
 *
 * @export
 * @interface ODataDataSets
 */
export interface ODataDataSets {
  /**
   *
   * @type {string}
   * @memberof ODataDataSets
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataDataSets
   */
  odata_count?: number;
  /**
   *
   * @type {Array<DataSet>}
   * @memberof ODataDataSets
   */
  value?: Array<DataSet>;
}

/**
 *
 * @export
 * @interface ODataDataSources
 */
export interface ODataDataSources {
  /**
   *
   * @type {string}
   * @memberof ODataDataSources
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataDataSources
   */
  odata_count?: number;
  /**
   *
   * @type {Array<DataSource>}
   * @memberof ODataDataSources
   */
  value?: Array<DataSource>;
}

/**
 *
 * @export
 * @interface ODataDependentItems
 */
export interface ODataDependentItems {
  /**
   *
   * @type {string}
   * @memberof ODataDependentItems
   */
  odata_context?: string;
  /**
   *
   * @type {Array<CatalogItem>}
   * @memberof ODataDependentItems
   */
  value?: Array<CatalogItem>;
}

/**
 *
 * @export
 * @interface ODataFolders
 */
export interface ODataFolders {
  /**
   *
   * @type {string}
   * @memberof ODataFolders
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataFolders
   */
  odata_count?: number;
  /**
   *
   * @type {Array<Folder>}
   * @memberof ODataFolders
   */
  value?: Array<Folder>;
}

/**
 *
 * @export
 * @interface ODataKpis
 */
export interface ODataKpis {
  /**
   *
   * @type {string}
   * @memberof ODataKpis
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataKpis
   */
  odata_count?: number;
  /**
   *
   * @type {Array<Kpi>}
   * @memberof ODataKpis
   */
  value?: Array<Kpi>;
}

/**
 *
 * @export
 * @interface ODataLinkedReports
 */
export interface ODataLinkedReports {
  /**
   *
   * @type {string}
   * @memberof ODataLinkedReports
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataLinkedReports
   */
  odata_count?: number;
  /**
   *
   * @type {Array<LinkedReport>}
   * @memberof ODataLinkedReports
   */
  value?: Array<LinkedReport>;
}

/**
 *
 * @export
 * @interface ODataMobileReport
 */
export interface ODataMobileReport {
  /**
   *
   * @type {string}
   * @memberof ODataMobileReport
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataMobileReport
   */
  odata_count?: number;
  /**
   *
   * @type {Array<MobileReport>}
   * @memberof ODataMobileReport
   */
  value?: Array<MobileReport>;
}

/**
 *
 * @export
 * @interface ODataProperties
 */
export interface ODataProperties {
  /**
   *
   * @type {string}
   * @memberof ODataProperties
   */
  odata_context?: string;
  /**
   *
   * @type {Array<Property>}
   * @memberof ODataProperties
   */
  value?: Array<Property>;
}

/**
 *
 * @export
 * @interface ODataProperties1
 */
export interface ODataProperties1 {
  /**
   *
   * @type {string}
   * @memberof ODataProperties1
   */
  odata_context?: string;
  /**
   *
   * @type {Array<Role>}
   * @memberof ODataProperties1
   */
  value?: Array<Role>;
}

/**
 *
 * @export
 * @interface ODataQueryFields
 */
export interface ODataQueryFields {
  /**
   *
   * @type {string}
   * @memberof ODataQueryFields
   */
  odata_context?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ODataQueryFields
   */
  value?: Array<string>;
}

/**
 *
 * @export
 * @interface ODataReportParameterDefinitions
 */
export interface ODataReportParameterDefinitions {
  /**
   *
   * @type {string}
   * @memberof ODataReportParameterDefinitions
   */
  odata_context?: string;
  /**
   *
   * @type {Array<ReportParameterDefinition>}
   * @memberof ODataReportParameterDefinitions
   */
  value?: Array<ReportParameterDefinition>;
}

/**
 *
 * @export
 * @interface ODataReports
 */
export interface ODataReports {
  /**
   *
   * @type {string}
   * @memberof ODataReports
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataReports
   */
  odata_count?: number;
  /**
   *
   * @type {Array<Report>}
   * @memberof ODataReports
   */
  value?: Array<Report>;
}

/**
 *
 * @export
 * @interface ODataResources
 */
export interface ODataResources {
  /**
   *
   * @type {string}
   * @memberof ODataResources
   */
  odata_context?: string;
  /**
   *
   * @type {number}
   * @memberof ODataResources
   */
  odata_count?: number;
  /**
   *
   * @type {Array<Resource>}
   * @memberof ODataResources
   */
  value?: Array<Resource>;
}

/**
 *
 * @export
 * @interface OdataError
 */
export interface OdataError {
  /**
   *
   * @type {OdataErrorMain}
   * @memberof OdataError
   */
  error: OdataErrorMain;
}

/**
 *
 * @export
 * @interface OdataErrorDetail
 */
export interface OdataErrorDetail {
  /**
   *
   * @type {string}
   * @memberof OdataErrorDetail
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof OdataErrorDetail
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof OdataErrorDetail
   */
  target?: string;
}

/**
 *
 * @export
 * @interface OdataErrorMain
 */
export interface OdataErrorMain {
  /**
   *
   * @type {string}
   * @memberof OdataErrorMain
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof OdataErrorMain
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof OdataErrorMain
   */
  target?: string;
  /**
   *
   * @type {Array<OdataErrorDetail>}
   * @memberof OdataErrorMain
   */
  details?: Array<OdataErrorDetail>;
  /**
   * The structure of this object is service-specific.
   * @type {any}
   * @memberof OdataErrorMain
   */
  innererror?: any;
}

/**
 * An object that specifies a parameter's value as a name-value pair.
 * @export
 * @interface ParameterValue
 */
export interface ParameterValue {
  /**
   * A string that contains the name of the parameter.
   * @type {string}
   * @memberof ParameterValue
   */
  Name?: string;
  /**
   * A string that contains the value for the parameter.
   * @type {string}
   * @memberof ParameterValue
   */
  Value?: string;
  /**
   * A boolean value that indicates if the parameter's value references a field.
   * @type {boolean}
   * @memberof ParameterValue
   */
  IsValueFieldReference?: boolean;
}

/**
 * An object that specifies a set of roles that are grouped together as a policy and can then be assigned as a group of policies to an item using the property GroupUserName.
 * @export
 * @interface Policy
 */
export interface Policy {
  /**
   * A string value that specifies the name of the user or group to which the policy applies.
   * @type {string}
   * @memberof Policy
   */
  GroupUserName?: string;
  /**
   * An array of objects of type Role that specify the security roles that are included in the Policy.
   * @type {Array<Role>}
   * @memberof Policy
   */
  Roles?: Array<Role>;
}

/**
 * An object that defines a property's value as a name-value pair.
 * @export
 * @interface Property
 */
export interface Property {
  /**
   * A string value that specifies the name of the property.
   * @type {string}
   * @memberof Property
   */
  Name?: string;
  /**
   * A string value that specifies the value for the property.
   * @type {string}
   * @memberof Property
   */
  Value?: string;
}

/**
 * Represents a SQL query to be executed. The query cannot contain parameters.
 * @export
 * @interface Query
 */
export interface Query {
  /**
   * Command to be executed against given data source
   * @type {string}
   * @memberof Query
   */
  CommandText?: string;
  /**
   * Query Timeout, default is 30 seconds.
   * @type {number}
   * @memberof Query
   */
  Timeout?: number;
}

/**
 *
 * @export
 * @interface QueryFieldsRequest
 */
export interface QueryFieldsRequest {
  /**
   *
   * @type {DataSource}
   * @memberof QueryFieldsRequest
   */
  dataSource?: DataSource;
  /**
   *
   * @type {Query}
   * @memberof QueryFieldsRequest
   */
  query?: Query;
}

/**
 *
 * @export
 * @interface Report
 */
export interface Report extends CatalogItem {
  /**
   * A boolean value that indicates whether the Report has DataSources associated with it.
   * @type {boolean}
   * @memberof Report
   */
  HasDataSources?: boolean;
  /**
   * A boolean value that indicates whether the Report has shared DataSets associated with it.
   * @type {boolean}
   * @memberof Report
   */
  HasSharedDataSets?: boolean;
  /**
   * A boolean value that indicates whether the Report has parameters.
   * @type {boolean}
   * @memberof Report
   */
  HasParameters?: boolean;
}

/**
 * An object that specifies options for a Report HistorySnapshot.
 * @export
 * @interface ReportHistorySnapshotsOptions
 */
export interface ReportHistorySnapshotsOptions {
  /**
   * A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.
   * @type {boolean}
   * @memberof ReportHistorySnapshotsOptions
   */
  ManualCreationEnabled?: boolean;
  /**
   * A Boolean value that specifies whether execution snapshots are kept.
   * @type {boolean}
   * @memberof ReportHistorySnapshotsOptions
   */
  KeepExecutionSnapshots?: boolean;
  /**
   * A boolean value that specifies whether the default system limit is used for this HistorySnapshot.
   * @type {boolean}
   * @memberof ReportHistorySnapshotsOptions
   */
  UseDefaultSystemLimit?: boolean;
  /**
   * An Int32 value indicating how many snapshots to keep.
   * @type {number}
   * @memberof ReportHistorySnapshotsOptions
   */
  ScopedLimit?: number;
  /**
   * An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.
   * @type {number}
   * @memberof ReportHistorySnapshotsOptions
   */
  SystemLimit?: number;
  /**
   *
   * @type {ReportHistorySnapshotsOptionsSchedule}
   * @memberof ReportHistorySnapshotsOptions
   */
  Schedule?: ReportHistorySnapshotsOptionsSchedule;
}

/**
 *
 * @export
 * @interface ReportHistorySnapshotsOptionsSchedule
 */
export interface ReportHistorySnapshotsOptionsSchedule { }

/**
 * An object that specifies the metadata definition of a parameter for a report.
 * @export
 * @interface ReportParameterDefinition
 */
export interface ReportParameterDefinition {
  /**
   * A boolean value that indicates whether the ReportParamter is allowed to be blank.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  AllowBlank?: boolean;
  /**
   * An array of string values that specify the ReportParameter's default values. If the parameter is multi-valued then the array can have more than one entry.
   * @type {Array<string>}
   * @memberof ReportParameterDefinition
   */
  DefaultValues?: Array<string>;
  /**
   *  A boolean value that indicates whether the DefaultValues property is NULL.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  DefaultValuesIsNull?: boolean;
  /**
   * A boolean value that indicates whether the ReportParamter's default values are obtained from a query (instead of being static specified values).
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  DefaultValuesQueryBased?: boolean;
  /**
   * An array of string values that specify the dependencies for the ReportParameter.
   * @type {Array<string>}
   * @memberof ReportParameterDefinition
   */
  Dependencies?: Array<string>;
  /**
   * Error returned when validating parameters.
   * @type {string}
   * @memberof ReportParameterDefinition
   */
  ErrorMessage?: string;
  /**
   * A boolean value that indicates whether the ReportParameter is multivalued.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  MultiValue?: boolean;
  /**
   * A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.
   * @type {string}
   * @memberof ReportParameterDefinition
   */
  Name?: string;
  /**
   * A boolean value that indicates whether the ReportParameter is allowed to be null.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  Nullable?: boolean;
  /**
   *
   * @type {ReportParameterState}
   * @memberof ReportParameterDefinition
   */
  ParameterState?: ReportParameterState;
  /**
   *
   * @type {ReportParameterType}
   * @memberof ReportParameterDefinition
   */
  ParameterType?: ReportParameterType;
  /**
   *
   * @type {ReportParameterVisibility}
   * @memberof ReportParameterDefinition
   */
  ParameterVisibility?: ReportParameterVisibility;
  /**
   * A string value that specifies text used to prompt a user for the value of the ReportParameter.
   * @type {string}
   * @memberof ReportParameterDefinition
   */
  Prompt?: string;
  /**
   * A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  PromptUser?: boolean;
  /**
   * A boolean value that indicates whether the ReportParamter is query based.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  QueryParameter?: boolean;
  /**
   *
   * @type {Array<ValidValue>}
   * @memberof ReportParameterDefinition
   */
  ValidValues?: Array<ValidValue>;
  /**
   * A boolean value that indicates whether the ValidValues property is NULL.
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  ValidValuesIsNull?: boolean;
  /**
   * A boolean value that indicates whether the ReportParameter's valid values are obtained from a query (instead of being static specified values).
   * @type {boolean}
   * @memberof ReportParameterDefinition
   */
  ValidValuesQueryBased?: boolean;
}

/**
 * An object that specifies the parts of a report parameter that can be modified outside of the RDL definition.
 * @export
 * @interface ReportParameterDefinitionPatch
 */
export interface ReportParameterDefinitionPatch {
  /**
   * A string value that specifies the name of the ReportParameter.
   * @type {string}
   * @memberof ReportParameterDefinitionPatch
   */
  Name?: string;
  /**
   * Array of default values
   * @type {Array<string>}
   * @memberof ReportParameterDefinitionPatch
   */
  DefaultValues?: Array<string>;
  /**
   * A string value that specifies text used to prompt a user for the value of the ReportParameter.
   * @type {string}
   * @memberof ReportParameterDefinitionPatch
   */
  Prompt?: string;
  /**
   *
   * @type {ReportParameterVisibility}
   * @memberof ReportParameterDefinitionPatch
   */
  ParameterVisibility?: ReportParameterVisibility;
}

/**
 * An enumeration of values that specify the valid states for a ReportParameter.
 * @export
 * @enum {string}
 */
export enum ReportParameterState {
  HasValidValue = <any>"HasValidValue",
  MissingValidValue = <any>"MissingValidValue",
  HasOutstandingDependencies = <any>"HasOutstandingDependencies",
  DynamicValuesUnavailable = <any>"DynamicValuesUnavailable",
}

/**
 * An enumeration of values that specify the data types for a report parameter.
 * @export
 * @enum {string}
 */
export enum ReportParameterType {
  Boolean = <any>"Boolean",
  DateTime = <any>"DateTime",
  Integer = <any>"Integer",
  Float = <any>"Float",
  String = <any>"String",
}

/**
 * An enumeration of values that specify the visibility of a report parameter, as to whether it is visible at runtime, hidden at runtime, or internal, meaning only visible in the definition.
 * @export
 * @enum {string}
 */
export enum ReportParameterVisibility {
  Visible = <any>"Visible",
  Hidden = <any>"Hidden",
  Internal = <any>"Internal",
}

/**
 *
 * @export
 * @interface Resource
 */
export interface Resource extends CatalogItem { }

/**
 * An object that contains metadata and contents for a ResourceItem.
 * @export
 * @interface ResourceGroup
 */
export interface ResourceGroup {
  /**
   *
   * @type {MobileReportResourceGroupType}
   * @memberof ResourceGroup
   */
  Type?: MobileReportResourceGroupType;
  /**
   * An array of objects of type ResourceItem that contain the contents of the ResourceGroup.
   * @type {Array<ResourceItem>}
   * @memberof ResourceGroup
   */
  Items?: Array<ResourceItem>;
}

/**
 * An object that specifies the metadata for a Resource.
 * @export
 * @interface ResourceItem
 */
export interface ResourceItem extends ManifestItem {
  /**
   *
   * @type {string}
   * @memberof ResourceItem
   */
  Key?: string;
}

/**
 * An object that specifies security roles that are supported on the Report Server instance.
 * @export
 * @interface Role
 */
export interface Role {
  /**
   * A string value that specifies the name of the Role.
   * @type {string}
   * @memberof Role
   */
  Name?: string;
  /**
   * A string value that constains descriptive text for the Role.
   * @type {string}
   * @memberof Role
   */
  Description?: string;
}

/**
 * An object that defines a schedule including a start date-time and an optional end date-time.
 * @export
 * @interface ScheduleDefinition
 */
export interface ScheduleDefinition {
  /**
   * A string that specifies the date-time of the start of the schedule.
   * @type {Date}
   * @memberof ScheduleDefinition
   */
  StartDateTime?: Date;
  /**
   * A string that specifies the date-time of the end of the schedule.
   * @type {Date}
   * @memberof ScheduleDefinition
   */
  EndDate?: Date;
  /**
   * A boolean value that indicates whether the schedule end is specified.
   * @type {boolean}
   * @memberof ScheduleDefinition
   */
  EndDateSpecified?: boolean;
  /**
   *
   * @type {ScheduleRecurrence}
   * @memberof ScheduleDefinition
   */
  Recurrence?: ScheduleRecurrence;
}

/**
 * An object that defines the recurrence of a schedule. When defining the recurrence, only one of the recurrence types can be set.
 * @export
 * @interface ScheduleRecurrence
 */
export interface ScheduleRecurrence {
  /**
   *
   * @type {MinuteRecurrence}
   * @memberof ScheduleRecurrence
   */
  MinuteRecurrence?: MinuteRecurrence;
  /**
   *
   * @type {DailyRecurrence}
   * @memberof ScheduleRecurrence
   */
  DailyRecurrence?: DailyRecurrence;
  /**
   *
   * @type {WeeklyRecurrence}
   * @memberof ScheduleRecurrence
   */
  WeeklyRecurrence?: WeeklyRecurrence;
  /**
   *
   * @type {MonthlyRecurrence}
   * @memberof ScheduleRecurrence
   */
  MonthlyRecurrence?: MonthlyRecurrence;
  /**
   *
   * @type {MonthlyDOWRecurrence}
   * @memberof ScheduleRecurrence
   */
  MonthlyDOWRecurrence?: MonthlyDOWRecurrence;
}

/**
 * An object that contains either a reference to a defined schedule or the schedule details for the current context.
 * @export
 * @interface ScheduleReference
 */
export interface ScheduleReference {
  /**
   * The Id property of an existing schedule that will be used in the current context.
   * @type {string}
   * @memberof ScheduleReference
   */
  ScheduleId?: string;
  /**
   *
   * @type {ScheduleDefinition}
   * @memberof ScheduleReference
   */
  Definition?: ScheduleDefinition;
}

/**
 * An object that defines a subscription. A Reporting Services subscription allows a user to subscribe to a Report or Data Source and then to automatically receive an update whenever the item is updated.
 * @export
 * @interface Subscription
 */
export interface Subscription {
  /**
   * A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.
   * @type {string}
   * @memberof Subscription
   */
  Id?: string;
  /**
   * A string value that specifies the owner of the Subscription.
   * @type {string}
   * @memberof Subscription
   */
  Owner?: string;
  /**
   * A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.
   * @type {boolean}
   * @memberof Subscription
   */
  IsDataDriven?: boolean;
  /**
   * A string value that contains descriptive text about the Subscription.
   * @type {string}
   * @memberof Subscription
   */
  Description?: string;
  /**
   * A string value that specifies the path of the report for this Subscription.
   * @type {string}
   * @memberof Subscription
   */
  Report?: string;
  /**
   * A boolean value that specifies whether the Subscription is currently active.
   * @type {boolean}
   * @memberof Subscription
   */
  IsActive?: boolean;
  /**
   * A string specifying the type of event that triggers the Subscription.
   * @type {string}
   * @memberof Subscription
   */
  EventType?: string;
  /**
   * A string value that contains descriptive text about the schedule referenced in the Schedule property.
   * @type {string}
   * @memberof Subscription
   */
  ScheduleDescription?: string;
  /**
   * A string value that contains the date-time that the schedule was last run.
   * @type {Date}
   * @memberof Subscription
   */
  LastRunTime?: Date;
  /**
   * A string specifying the Status of the last run.
   * @type {string}
   * @memberof Subscription
   */
  LastStatus?: string;
  /**
   *
   * @type {ExtensionSettings}
   * @memberof Subscription
   */
  ExtensionSettings?: ExtensionSettings;
  /**
   * An object that specifies the DeliveryExtension that will be used with this Schedule's report delivery.
   * @type {string}
   * @memberof Subscription
   */
  DeliveryExtension?: string;
  /**
   * Localized version of extension name when available.
   * @type {string}
   * @memberof Subscription
   */
  LocalizedDeliveryExtensionName?: string;
  /**
   * A string value that contains the network user name of the last user to modify the subscription.
   * @type {string}
   * @memberof Subscription
   */
  ModifiedBy?: string;
  /**
   * A string value that contains the date-time of the last modification to the subscription.
   * @type {Date}
   * @memberof Subscription
   */
  ModifiedDate?: Date;
  /**
   * An array of items of type ParameterValue that specify the parameter values for the subscription.
   * @type {Array<ParameterValue>}
   * @memberof Subscription
   */
  ParameterValues?: Array<ParameterValue>;
}

/**
 * An object that specifies information about the Report Server.
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
  /**
   * A string value that specifies the URL for the Report Server.
   * @type {string}
   * @memberof SystemInfo
   */
  ReportServerAbsoluteUrl?: string;
  /**
   * A string value that specifies the Report Server Virtual Directory.
   * @type {string}
   * @memberof SystemInfo
   */
  ReportServerRelativeUrl?: string;
  /**
   * A string value that specifies the URL for the Report Server web portal.
   * @type {string}
   * @memberof SystemInfo
   */
  WebPortalRelativeUrl?: string;
  /**
   * A string value that specifies the name of the product being used.
   * @type {string}
   * @memberof SystemInfo
   */
  ProductName?: string;
  /**
   * A string value that specifies the version of the product being used.
   * @type {string}
   * @memberof SystemInfo
   */
  ProductVersion?: string;
  /**
   * A string value that specifies the type of the product being used.
   * @type {string}
   * @memberof SystemInfo
   */
  ProductType?: SystemInfo.ProductTypeEnum;
  /**
   * A string value that specifies the timezone being used by the server.
   * @type {string}
   * @memberof SystemInfo
   */
  TimeZone?: string;
}

/**
 * @export
 * @namespace SystemInfo
 */
export namespace SystemInfo {
  /**
   * @export
   * @enum {string}
   */
  export enum ProductTypeEnum {
    PowerBiReportServer = <any>"PowerBiReportServer",
    SqlServerReportingServices = <any>"SqlServerReportingServices",
  }
}

/**
 *
 * @export
 * @interface SystemPolicy
 */
export interface SystemPolicy {
  /**
   * A unique UUID value that specifies the identifier of the SystemPolicy.
   * @type {string}
   * @memberof SystemPolicy
   */
  Id?: string;
  /**
   * An array of objects of type Policy that specify the access policies to be applied to the System.
   * @type {Array<Policy>}
   * @memberof SystemPolicy
   */
  Policies?: Array<Policy>;
}

/**
 * An object that contains the contents of a thumbnail.
 * @export
 * @interface ThumbnailItem
 */
export interface ThumbnailItem extends ManifestItem {
  /**
   *
   * @type {MobileReportThumbnailType}
   * @memberof ThumbnailItem
   */
  Type?: MobileReportThumbnailType;
}

/**
 *
 * @export
 * @interface UpdateCacheSnapshotResult
 */
export interface UpdateCacheSnapshotResult {
  /**
   *
   * @type {boolean}
   * @memberof UpdateCacheSnapshotResult
   */
  value?: boolean;
}

/**
 * An object that contains information about the Report Server user.
 * @export
 * @interface User
 */
export interface User {
  /**
   * A unique UUID value that specifies the identifier by which this User object can be referenced in requests or in other defined objects.
   * @type {string}
   * @memberof User
   */
  Id?: string;
  /**
   * A string value that specifies the network user name for the user.
   * @type {string}
   * @memberof User
   */
  Username?: string;
  /**
   * A string value that specifies the name to display for the network user.
   * @type {string}
   * @memberof User
   */
  DisplayName?: string;
  /**
   * A boolean value that indicates whether the user has items that are designated as favorite items.
   * @type {boolean}
   * @memberof User
   */
  HasFavoriteItems?: boolean;
  /**
   * A string value that specifies a path to a folder where a user's reports are stored by default. (This feature must be enabled by the server administrator).
   * @type {string}
   * @memberof User
   */
  MyReportsPath?: string;
}

/**
 *
 * @export
 * @interface UserCredentials
 */
export interface UserCredentials {
  /**
   * A string value that specifies the user name for the user.
   * @type {string}
   * @memberof UserCredentials
   */
  UserName?: string;
  /**
   * A string value that specifies the password for the user.
   * @type {string}
   * @memberof UserCredentials
   */
  Password?: string;
  /**
   * A string value that specifies the domain for the user.
   * @type {string}
   * @memberof UserCredentials
   */
  Domain?: string;
}

/**
 * An object that contains a value that is valid for use in its context, in the form of a label-value pair.
 * @export
 * @interface ValidValue
 */
export interface ValidValue {
  /**
   * A string value that specifies the label for the ValidValue.
   * @type {string}
   * @memberof ValidValue
   */
  Label?: string;
  /**
   * A string value that specifies the value of the ValidValue.
   * @type {string}
   * @memberof ValidValue
   */
  Value?: string;
}

/**
 * Describes the week of the month on which a scheduled report runs.
 * @export
 * @enum {string}
 */
export enum WeekNumberEnum {
  FirstWeek = <any>"FirstWeek",
  SecondWeek = <any>"SecondWeek",
  ThirdWeek = <any>"ThirdWeek",
  FourthWeek = <any>"FourthWeek",
  LastWeek = <any>"LastWeek",
}

/**
 * Represents the intervals at which a scheduled report runs. Intervals are specified in weeks and on which days of the week.
 * @export
 * @interface WeeklyRecurrence
 */
export interface WeeklyRecurrence {
  /**
   * An Int32 value representing interval in weeks.
   * @type {number}
   * @memberof WeeklyRecurrence
   */
  WeeksInterval?: number;
  /**
   * True if using WeeksInterval.
   * @type {boolean}
   * @memberof WeeklyRecurrence
   */
  WeeksIntervalSpecified?: boolean;
  /**
   *
   * @type {DaysOfWeekSelector}
   * @memberof WeeklyRecurrence
   */
  DaysOfWeek?: DaysOfWeekSelector;
}

/**
 * CacheRefreshPlansApi - fetch parameter creator
 * @export
 */
export const CacheRefreshPlansApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new CacheRefreshPlan item.
     * @param {CacheRefreshPlan} CacheRefreshPlan The definition of the new CacheRefreshPlan item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCacheRefreshPlan(
      CacheRefreshPlan: CacheRefreshPlan,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'CacheRefreshPlan' is not null or undefined
      if (CacheRefreshPlan === null || CacheRefreshPlan === undefined) {
        throw new RequiredError(
          "CacheRefreshPlan",
          "Required parameter CacheRefreshPlan was null or undefined when calling addCacheRefreshPlan."
        );
      }
      const localVarPath = `/CacheRefreshPlans`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CacheRefreshPlan" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CacheRefreshPlan || {})
        : CacheRefreshPlan || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified CacheRefreshPlan.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCacheRefreshPlan(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteCacheRefreshPlan."
        );
      }
      const localVarPath = `/CacheRefreshPlans({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Executes given CacheRefreshPlan immediately.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCacheRefreshPlan(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling executeCacheRefreshPlan."
        );
      }
      const localVarPath = `/CacheRefreshPlans({Id})/Model.Execute`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a CacheRefreshPlan item specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCacheRefreshPlan(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getCacheRefreshPlan."
        );
      }
      const localVarPath = `/CacheRefreshPlans({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces the specified CacheRefreshPlan item using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheRefreshPlan} CacheRefreshPlan Definition of the CacheRefreshPlan item that updates the current item on the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCacheRefreshPlan(
      Id: string,
      CacheRefreshPlan: CacheRefreshPlan,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setCacheRefreshPlan."
        );
      }
      // verify required parameter 'CacheRefreshPlan' is not null or undefined
      if (CacheRefreshPlan === null || CacheRefreshPlan === undefined) {
        throw new RequiredError(
          "CacheRefreshPlan",
          "Required parameter CacheRefreshPlan was null or undefined when calling setCacheRefreshPlan."
        );
      }
      const localVarPath = `/CacheRefreshPlans({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CacheRefreshPlan" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CacheRefreshPlan || {})
        : CacheRefreshPlan || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CacheRefreshPlansApi - functional programming interface
 * @export
 */
export const CacheRefreshPlansApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new CacheRefreshPlan item.
     * @param {CacheRefreshPlan} CacheRefreshPlan The definition of the new CacheRefreshPlan item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCacheRefreshPlan(
      CacheRefreshPlan: CacheRefreshPlan,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CacheRefreshPlan> {
      const localVarFetchArgs = CacheRefreshPlansApiFetchParamCreator(
        configuration
      ).addCacheRefreshPlan(CacheRefreshPlan, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified CacheRefreshPlan.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCacheRefreshPlan(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CacheRefreshPlansApiFetchParamCreator(
        configuration
      ).deleteCacheRefreshPlan(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Executes given CacheRefreshPlan immediately.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCacheRefreshPlan(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CacheRefreshPlansApiFetchParamCreator(
        configuration
      ).executeCacheRefreshPlan(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a CacheRefreshPlan item specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCacheRefreshPlan(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CacheRefreshPlan> {
      const localVarFetchArgs = CacheRefreshPlansApiFetchParamCreator(
        configuration
      ).getCacheRefreshPlan(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces the specified CacheRefreshPlan item using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheRefreshPlan} CacheRefreshPlan Definition of the CacheRefreshPlan item that updates the current item on the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCacheRefreshPlan(
      Id: string,
      CacheRefreshPlan: CacheRefreshPlan,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CacheRefreshPlan> {
      const localVarFetchArgs = CacheRefreshPlansApiFetchParamCreator(
        configuration
      ).setCacheRefreshPlan(Id, CacheRefreshPlan, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * CacheRefreshPlansApi - factory interface
 * @export
 */
export const CacheRefreshPlansApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new CacheRefreshPlan item.
     * @param {CacheRefreshPlan} CacheRefreshPlan The definition of the new CacheRefreshPlan item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCacheRefreshPlan(CacheRefreshPlan: CacheRefreshPlan, options?: any) {
      return CacheRefreshPlansApiFp(configuration).addCacheRefreshPlan(
        CacheRefreshPlan,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified CacheRefreshPlan.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCacheRefreshPlan(Id: string, options?: any) {
      return CacheRefreshPlansApiFp(configuration).deleteCacheRefreshPlan(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Executes given CacheRefreshPlan immediately.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCacheRefreshPlan(Id: string, options?: any) {
      return CacheRefreshPlansApiFp(configuration).executeCacheRefreshPlan(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets a CacheRefreshPlan item specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCacheRefreshPlan(Id: string, options?: any) {
      return CacheRefreshPlansApiFp(configuration).getCacheRefreshPlan(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces the specified CacheRefreshPlan item using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheRefreshPlan} CacheRefreshPlan Definition of the CacheRefreshPlan item that updates the current item on the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCacheRefreshPlan(
      Id: string,
      CacheRefreshPlan: CacheRefreshPlan,
      options?: any
    ) {
      return CacheRefreshPlansApiFp(configuration).setCacheRefreshPlan(
        Id,
        CacheRefreshPlan,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * CacheRefreshPlansApi - object-oriented interface
 * @export
 * @class CacheRefreshPlansApi
 * @extends {BaseAPI}
 */
export class CacheRefreshPlansApi extends BaseAPI {
  /**
   *
   * @summary Creates a new CacheRefreshPlan item.
   * @param {CacheRefreshPlan} CacheRefreshPlan The definition of the new CacheRefreshPlan item.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CacheRefreshPlansApi
   */
  public addCacheRefreshPlan(
    CacheRefreshPlan: CacheRefreshPlan,
    options?: any
  ) {
    return CacheRefreshPlansApiFp(this.configuration).addCacheRefreshPlan(
      CacheRefreshPlan,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified CacheRefreshPlan.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CacheRefreshPlansApi
   */
  public deleteCacheRefreshPlan(Id: string, options?: any) {
    return CacheRefreshPlansApiFp(this.configuration).deleteCacheRefreshPlan(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Executes given CacheRefreshPlan immediately.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CacheRefreshPlansApi
   */
  public executeCacheRefreshPlan(Id: string, options?: any) {
    return CacheRefreshPlansApiFp(this.configuration).executeCacheRefreshPlan(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets a CacheRefreshPlan item specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CacheRefreshPlansApi
   */
  public getCacheRefreshPlan(Id: string, options?: any) {
    return CacheRefreshPlansApiFp(this.configuration).getCacheRefreshPlan(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces the specified CacheRefreshPlan item using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {CacheRefreshPlan} CacheRefreshPlan Definition of the CacheRefreshPlan item that updates the current item on the server.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CacheRefreshPlansApi
   */
  public setCacheRefreshPlan(
    Id: string,
    CacheRefreshPlan: CacheRefreshPlan,
    options?: any
  ) {
    return CacheRefreshPlansApiFp(this.configuration).setCacheRefreshPlan(
      Id,
      CacheRefreshPlan,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * CatalogItemsApi - fetch parameter creator
 * @export
 */
export const CatalogItemsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new CatalogItem.
     * @param {CatalogItem} CatalogItem The definition of the new CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCatalogItem(CatalogItem: CatalogItem, options: any = {}): FetchArgs {
      // verify required parameter 'CatalogItem' is not null or undefined
      if (CatalogItem === null || CatalogItem === undefined) {
        throw new RequiredError(
          "CatalogItem",
          "Required parameter CatalogItem was null or undefined when calling addCatalogItem."
        );
      }
      const localVarPath = `/CatalogItems`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CatalogItem" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CatalogItem || {})
        : CatalogItem || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogItem(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteCatalogItem."
        );
      }
      const localVarPath = `/CatalogItems({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the given list of items
     * @param {DeleteItemsRequest} DeleteItemsRequest List of catalog item paths to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogItems(
      DeleteItemsRequest: DeleteItemsRequest,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'DeleteItemsRequest' is not null or undefined
      if (DeleteItemsRequest === null || DeleteItemsRequest === undefined) {
        throw new RequiredError(
          "DeleteItemsRequest",
          "Required parameter DeleteItemsRequest was null or undefined when calling deleteCatalogItems."
        );
      }
      const localVarPath = `/CatalogItems/Model.DeleteItems`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DeleteItemsRequest" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DeleteItemsRequest || {})
        : DeleteItemsRequest || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItem(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getCatalogItem."
        );
      }
      const localVarPath = `/CatalogItems({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of the specified CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemContent(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getCatalogItemContent."
        );
      }
      const localVarPath = `/CatalogItems({Id})/Content/$value`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getCatalogItemPolicies."
        );
      }
      const localVarPath = `/CatalogItems({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Comma-separated list of Property names to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemProperties(
      Id: string,
      Properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getCatalogItemProperties."
        );
      }
      const localVarPath = `/CatalogItems({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (Properties) {
        localVarQueryParameter["Properties"] = Properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the list of available Roles for the CatalogItem
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemRoles(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getCatalogItemRoles."
        );
      }
      const localVarPath = `/CatalogItems({Id})/Roles`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItems(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/CatalogItems`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Moves given list of items to target folder.
     * @param {MoveItemsRequest} MoveItemsRequest List of catalog item paths and target folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveCatalogItems(
      MoveItemsRequest: MoveItemsRequest,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'MoveItemsRequest' is not null or undefined
      if (MoveItemsRequest === null || MoveItemsRequest === undefined) {
        throw new RequiredError(
          "MoveItemsRequest",
          "Required parameter MoveItemsRequest was null or undefined when calling moveCatalogItems."
        );
      }
      const localVarPath = `/CatalogItems/Model.MoveItems`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"MoveItemsRequest" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(MoveItemsRequest || {})
        : MoveItemsRequest || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} CatalogItem The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCatalogItemPolicies(
      Id: string,
      CatalogItem: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setCatalogItemPolicies."
        );
      }
      // verify required parameter 'CatalogItem' is not null or undefined
      if (CatalogItem === null || CatalogItem === undefined) {
        throw new RequiredError(
          "CatalogItem",
          "Required parameter CatalogItem was null or undefined when calling setCatalogItemPolicies."
        );
      }
      const localVarPath = `/CatalogItems({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CatalogItem || {})
        : CatalogItem || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CatalogItem} CatalogItem Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalogItem(
      Id: string,
      CatalogItem: CatalogItem,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateCatalogItem."
        );
      }
      // verify required parameter 'CatalogItem' is not null or undefined
      if (CatalogItem === null || CatalogItem === undefined) {
        throw new RequiredError(
          "CatalogItem",
          "Required parameter CatalogItem was null or undefined when calling updateCatalogItem."
        );
      }
      const localVarPath = `/CatalogItems({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CatalogItem" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CatalogItem || {})
        : CatalogItem || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates a CatalogItem's Properties with the list of given properties.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalogItemProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateCatalogItemProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateCatalogItemProperties."
        );
      }
      const localVarPath = `/CatalogItems({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CatalogItemsApi - functional programming interface
 * @export
 */
export const CatalogItemsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new CatalogItem.
     * @param {CatalogItem} CatalogItem The definition of the new CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCatalogItem(
      CatalogItem: CatalogItem,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CatalogItem> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).addCatalogItem(CatalogItem, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogItem(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).deleteCatalogItem(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the given list of items
     * @param {DeleteItemsRequest} DeleteItemsRequest List of catalog item paths to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogItems(
      DeleteItemsRequest: DeleteItemsRequest,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<BulkOperationsResult> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).deleteCatalogItems(DeleteItemsRequest, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItem(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CatalogItem> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).getCatalogItem(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of the specified CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemContent(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).getCatalogItemContent(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).getCatalogItemPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Comma-separated list of Property names to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemProperties(
      Id: string,
      Properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).getCatalogItemProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the list of available Roles for the CatalogItem
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemRoles(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties1> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).getCatalogItemRoles(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItems(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataCatalogItems> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).getCatalogItems(top, skip, filter, count, orderBy, select, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Moves given list of items to target folder.
     * @param {MoveItemsRequest} MoveItemsRequest List of catalog item paths and target folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveCatalogItems(
      MoveItemsRequest: MoveItemsRequest,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<BulkOperationsResult> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).moveCatalogItems(MoveItemsRequest, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} CatalogItem The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCatalogItemPolicies(
      Id: string,
      CatalogItem: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).setCatalogItemPolicies(Id, CatalogItem, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CatalogItem} CatalogItem Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalogItem(
      Id: string,
      CatalogItem: CatalogItem,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).updateCatalogItem(Id, CatalogItem, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates a CatalogItem's Properties with the list of given properties.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalogItemProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CatalogItemsApiFetchParamCreator(
        configuration
      ).updateCatalogItemProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * CatalogItemsApi - factory interface
 * @export
 */
export const CatalogItemsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new CatalogItem.
     * @param {CatalogItem} CatalogItem The definition of the new CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCatalogItem(CatalogItem: CatalogItem, options?: any) {
      return CatalogItemsApiFp(configuration).addCatalogItem(
        CatalogItem,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogItem(Id: string, options?: any) {
      return CatalogItemsApiFp(configuration).deleteCatalogItem(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Deletes the given list of items
     * @param {DeleteItemsRequest} DeleteItemsRequest List of catalog item paths to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogItems(DeleteItemsRequest: DeleteItemsRequest, options?: any) {
      return CatalogItemsApiFp(configuration).deleteCatalogItems(
        DeleteItemsRequest,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets a CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItem(Id: string, options?: any) {
      return CatalogItemsApiFp(configuration).getCatalogItem(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the content of the specified CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemContent(Id: string, options?: any) {
      return CatalogItemsApiFp(configuration).getCatalogItemContent(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemPolicies(Id: string, options?: any) {
      return CatalogItemsApiFp(configuration).getCatalogItemPolicies(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Comma-separated list of Property names to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemProperties(
      Id: string,
      Properties?: Array<string>,
      options?: any
    ) {
      return CatalogItemsApiFp(configuration).getCatalogItemProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the list of available Roles for the CatalogItem
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItemRoles(Id: string, options?: any) {
      return CatalogItemsApiFp(configuration).getCatalogItemRoles(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets an array of CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogItems(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return CatalogItemsApiFp(configuration).getCatalogItems(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Moves given list of items to target folder.
     * @param {MoveItemsRequest} MoveItemsRequest List of catalog item paths and target folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveCatalogItems(MoveItemsRequest: MoveItemsRequest, options?: any) {
      return CatalogItemsApiFp(configuration).moveCatalogItems(
        MoveItemsRequest,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} CatalogItem The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCatalogItemPolicies(
      Id: string,
      CatalogItem: Array<ItemPolicy>,
      options?: any
    ) {
      return CatalogItemsApiFp(configuration).setCatalogItemPolicies(
        Id,
        CatalogItem,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CatalogItem} CatalogItem Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalogItem(Id: string, CatalogItem: CatalogItem, options?: any) {
      return CatalogItemsApiFp(configuration).updateCatalogItem(
        Id,
        CatalogItem,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates a CatalogItem's Properties with the list of given properties.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalogItemProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return CatalogItemsApiFp(configuration).updateCatalogItemProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * CatalogItemsApi - object-oriented interface
 * @export
 * @class CatalogItemsApi
 * @extends {BaseAPI}
 */
export class CatalogItemsApi extends BaseAPI {
  /**
   *
   * @summary Creates a new CatalogItem.
   * @param {CatalogItem} CatalogItem The definition of the new CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public addCatalogItem(CatalogItem: CatalogItem, options?: any) {
    return CatalogItemsApiFp(this.configuration).addCatalogItem(
      CatalogItem,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public deleteCatalogItem(Id: string, options?: any) {
    return CatalogItemsApiFp(this.configuration).deleteCatalogItem(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Deletes the given list of items
   * @param {DeleteItemsRequest} DeleteItemsRequest List of catalog item paths to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public deleteCatalogItems(
    DeleteItemsRequest: DeleteItemsRequest,
    options?: any
  ) {
    return CatalogItemsApiFp(this.configuration).deleteCatalogItems(
      DeleteItemsRequest,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets a CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public getCatalogItem(Id: string, options?: any) {
    return CatalogItemsApiFp(this.configuration).getCatalogItem(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the content of the specified CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public getCatalogItemContent(Id: string, options?: any) {
    return CatalogItemsApiFp(this.configuration).getCatalogItemContent(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets ItemPolicies associated with the specified CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public getCatalogItemPolicies(Id: string, options?: any) {
    return CatalogItemsApiFp(this.configuration).getCatalogItemPolicies(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [Properties] Comma-separated list of Property names to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public getCatalogItemProperties(
    Id: string,
    Properties?: Array<string>,
    options?: any
  ) {
    return CatalogItemsApiFp(this.configuration).getCatalogItemProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the list of available Roles for the CatalogItem
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public getCatalogItemRoles(Id: string, options?: any) {
    return CatalogItemsApiFp(this.configuration).getCatalogItemRoles(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public getCatalogItems(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return CatalogItemsApiFp(this.configuration).getCatalogItems(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Moves given list of items to target folder.
   * @param {MoveItemsRequest} MoveItemsRequest List of catalog item paths and target folder.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public moveCatalogItems(MoveItemsRequest: MoveItemsRequest, options?: any) {
    return CatalogItemsApiFp(this.configuration).moveCatalogItems(
      MoveItemsRequest,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the specified CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} CatalogItem The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public setCatalogItemPolicies(
    Id: string,
    CatalogItem: Array<ItemPolicy>,
    options?: any
  ) {
    return CatalogItemsApiFp(this.configuration).setCatalogItemPolicies(
      Id,
      CatalogItem,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {CatalogItem} CatalogItem Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public updateCatalogItem(
    Id: string,
    CatalogItem: CatalogItem,
    options?: any
  ) {
    return CatalogItemsApiFp(this.configuration).updateCatalogItem(
      Id,
      CatalogItem,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates a CatalogItem's Properties with the list of given properties.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogItemsApi
   */
  public updateCatalogItemProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return CatalogItemsApiFp(this.configuration).updateCatalogItemProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * DataSetsApi - fetch parameter creator
 * @export
 */
export const DataSetsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new DataSet CatalogItem.
     * @param {DataSet} DataSet The definition of the new DataSet CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDataSet(DataSet: DataSet, options: any = {}): FetchArgs {
      // verify required parameter 'DataSet' is not null or undefined
      if (DataSet === null || DataSet === undefined) {
        throw new RequiredError(
          "DataSet",
          "Required parameter DataSet was null or undefined when calling addDataSet."
        );
      }
      const localVarPath = `/DataSets`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSet" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSet || {})
        : DataSet || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataSet(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteDataSet."
        );
      }
      const localVarPath = `/DataSets({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a DataSet CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSet(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSet."
        );
      }
      const localVarPath = `/DataSets({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the value for the specified DataSet column using the given aggregation type.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} ColumnName The name of the DataSet column to aggregate the value for.
     * @param {string} Aggregation The type of aggregation to use on the specified column. Values come from the KpiSharedDataItemAggregation enum.
     * @param {DataSetAggregateValueParameters} [Parameters] An array of DataSet parameters to use when executing the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetAggregatedValue(
      Id: string,
      ColumnName: string,
      Aggregation: string,
      Parameters?: DataSetAggregateValueParameters,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetAggregatedValue."
        );
      }
      // verify required parameter 'ColumnName' is not null or undefined
      if (ColumnName === null || ColumnName === undefined) {
        throw new RequiredError(
          "ColumnName",
          "Required parameter ColumnName was null or undefined when calling getDataSetAggregatedValue."
        );
      }
      // verify required parameter 'Aggregation' is not null or undefined
      if (Aggregation === null || Aggregation === undefined) {
        throw new RequiredError(
          "Aggregation",
          "Required parameter Aggregation was null or undefined when calling getDataSetAggregatedValue."
        );
      }
      const localVarPath = `/DataSets({Id})/Model.GetAggregatedValue`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (ColumnName !== undefined) {
        localVarQueryParameter["ColumnName"] = ColumnName;
      }

      if (Aggregation !== undefined) {
        localVarQueryParameter["Aggregation"] = Aggregation;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSetAggregateValueParameters" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Parameters || {})
        : Parameters || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetAllowedActions."
        );
      }
      const localVarPath = `/DataSets({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the CacheOption's content for a given DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetCacheOptions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetCacheOptions."
        );
      }
      const localVarPath = `/DataSets({Id})/CacheOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for a given DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetCacheRefreshPlans(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetCacheRefreshPlans."
        );
      }
      const localVarPath = `/DataSets({Id})/CacheRefreshPlans`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of the specified DataSet CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetContent(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetContent."
        );
      }
      const localVarPath = `/DataSets({Id})/Content/$value`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the query results for the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {number} [MaxRows] Specifies the maximum number of rows to return from the query.
     * @param {DataSetDataParameters} [Parameters] An array of DataSet parameters to use when executing the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetData(
      Id: string,
      MaxRows?: number,
      Parameters?: DataSetDataParameters,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetData."
        );
      }
      const localVarPath = `/DataSets({Id})/Model.GetData`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (MaxRows !== undefined) {
        localVarQueryParameter["MaxRows"] = MaxRows;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSetDataParameters" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Parameters || {})
        : Parameters || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDataSource(
      Id: string,
      DataSourceId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetDataSource."
        );
      }
      // verify required parameter 'DataSourceId' is not null or undefined
      if (DataSourceId === null || DataSourceId === undefined) {
        throw new RequiredError(
          "DataSourceId",
          "Required parameter DataSourceId was null or undefined when calling getDataSetDataSource."
        );
      }
      const localVarPath = `/DataSets({Id})/DataSources({DataSourceId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(
          `{${"DataSourceId"}}`,
          encodeURIComponent(String(DataSourceId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the DataSources associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDataSources(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetDataSources."
        );
      }
      const localVarPath = `/DataSets({Id})/DataSources`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDependentItems(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetDependentItems."
        );
      }
      const localVarPath = `/DataSets({Id})/DependentItems`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetParameterDefinitions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetParameterDefinitions."
        );
      }
      const localVarPath = `/DataSets({Id})/ParameterDefinitions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified DataSet CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetPolicies."
        );
      }
      const localVarPath = `/DataSets({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the schema for the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetSchema(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSetSchema."
        );
      }
      const localVarPath = `/DataSets({Id})/Model.GetSchema`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of DataSet CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSets(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/DataSets`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets DataSet Properties (takes list of property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatasetProperties(
      Id: string,
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDatasetProperties."
        );
      }
      const localVarPath = `/DataSets({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces the CacheOption's content for a given DataSet using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the given DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setDataSetCacheOptions."
        );
      }
      // verify required parameter 'CacheOptions' is not null or undefined
      if (CacheOptions === null || CacheOptions === undefined) {
        throw new RequiredError(
          "CacheOptions",
          "Required parameter CacheOptions was null or undefined when calling setDataSetCacheOptions."
        );
      }
      const localVarPath = `/DataSets({Id})/CacheOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CacheOptions" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CacheOptions || {})
        : CacheOptions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetDataSource(
      Id: string,
      DataSourceId: string,
      DataSource: DataSource,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setDataSetDataSource."
        );
      }
      // verify required parameter 'DataSourceId' is not null or undefined
      if (DataSourceId === null || DataSourceId === undefined) {
        throw new RequiredError(
          "DataSourceId",
          "Required parameter DataSourceId was null or undefined when calling setDataSetDataSource."
        );
      }
      // verify required parameter 'DataSource' is not null or undefined
      if (DataSource === null || DataSource === undefined) {
        throw new RequiredError(
          "DataSource",
          "Required parameter DataSource was null or undefined when calling setDataSetDataSource."
        );
      }
      const localVarPath = `/DataSets({Id})/DataSources({DataSourceId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(
          `{${"DataSourceId"}}`,
          encodeURIComponent(String(DataSourceId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSource || {})
        : DataSource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSource definition associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the specified DataSet CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetDataSources(
      Id: string,
      DataSource: DataSource,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setDataSetDataSources."
        );
      }
      // verify required parameter 'DataSource' is not null or undefined
      if (DataSource === null || DataSource === undefined) {
        throw new RequiredError(
          "DataSource",
          "Required parameter DataSource was null or undefined when calling setDataSetDataSources."
        );
      }
      const localVarPath = `/DataSets({Id})/DataSources`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSource || {})
        : DataSource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified DataSet item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setDataSetPolicies."
        );
      }
      // verify required parameter 'ItemPolicy' is not null or undefined
      if (ItemPolicy === null || ItemPolicy === undefined) {
        throw new RequiredError(
          "ItemPolicy",
          "Required parameter ItemPolicy was null or undefined when calling setDataSetPolicies."
        );
      }
      const localVarPath = `/DataSets({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ItemPolicy || {})
        : ItemPolicy || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified DataSet CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSet} DataSet Definition of the DataSet item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSet(Id: string, DataSet: DataSet, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateDataSet."
        );
      }
      // verify required parameter 'DataSet' is not null or undefined
      if (DataSet === null || DataSet === undefined) {
        throw new RequiredError(
          "DataSet",
          "Required parameter DataSet was null or undefined when calling updateDataSet."
        );
      }
      const localVarPath = `/DataSets({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSet" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSet || {})
        : DataSet || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the DataSet specified.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the DataSet, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property valueswill be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSetParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateDataSetParameterDefinitions."
        );
      }
      // verify required parameter 'ParameterDefinitions' is not null or undefined
      if (ParameterDefinitions === null || ParameterDefinitions === undefined) {
        throw new RequiredError(
          "ParameterDefinitions",
          "Required parameter ParameterDefinitions was null or undefined when calling updateDataSetParameterDefinitions."
        );
      }
      const localVarPath = `/DataSets({Id})/ParameterDefinitions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ReportParameterDefinitionPatch&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ParameterDefinitions || {})
        : ParameterDefinitions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSet Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatasetProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateDatasetProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateDatasetProperties."
        );
      }
      const localVarPath = `/DataSets({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DataSetsApi - functional programming interface
 * @export
 */
export const DataSetsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new DataSet CatalogItem.
     * @param {DataSet} DataSet The definition of the new DataSet CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDataSet(
      DataSet: DataSet,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSet> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).addDataSet(DataSet, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataSet(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).deleteDataSet(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a DataSet CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSet(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSet> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSet(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the value for the specified DataSet column using the given aggregation type.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} ColumnName The name of the DataSet column to aggregate the value for.
     * @param {string} Aggregation The type of aggregation to use on the specified column. Values come from the KpiSharedDataItemAggregation enum.
     * @param {DataSetAggregateValueParameters} [Parameters] An array of DataSet parameters to use when executing the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetAggregatedValue(
      Id: string,
      ColumnName: string,
      Aggregation: string,
      Parameters?: DataSetAggregateValueParameters,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<number>> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetAggregatedValue(
        Id,
        ColumnName,
        Aggregation,
        Parameters,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the CacheOption's content for a given DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetCacheOptions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CacheOptions> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetCacheOptions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for a given DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetCacheRefreshPlans(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<ODataCacheRefreshPlans> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetCacheRefreshPlans(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of the specified DataSet CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetContent(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetContent(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the query results for the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {number} [MaxRows] Specifies the maximum number of rows to return from the query.
     * @param {DataSetDataParameters} [Parameters] An array of DataSet parameters to use when executing the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetData(
      Id: string,
      MaxRows?: number,
      Parameters?: DataSetDataParameters,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSetData> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetData(Id, MaxRows, Parameters, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDataSource(
      Id: string,
      DataSourceId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSource> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetDataSource(Id, DataSourceId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the DataSources associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDataSources(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DataSource>> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetDataSources(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDependentItems(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDependentItems> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetDependentItems(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetParameterDefinitions(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<ODataReportParameterDefinitions> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetParameterDefinitions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified DataSet CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the schema for the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetSchema(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSetSchema> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSetSchema(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of DataSet CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSets(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDataSets> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDataSets(top, skip, filter, count, orderBy, select, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets DataSet Properties (takes list of property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatasetProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).getDatasetProperties(Id, properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces the CacheOption's content for a given DataSet using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the given DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).setDataSetCacheOptions(Id, CacheOptions, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetDataSource(
      Id: string,
      DataSourceId: string,
      DataSource: DataSource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).setDataSetDataSource(Id, DataSourceId, DataSource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSource definition associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the specified DataSet CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetDataSources(
      Id: string,
      DataSource: DataSource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).setDataSetDataSources(Id, DataSource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified DataSet item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).setDataSetPolicies(Id, ItemPolicy, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified DataSet CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSet} DataSet Definition of the DataSet item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSet(
      Id: string,
      DataSet: DataSet,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).updateDataSet(Id, DataSet, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the DataSet specified.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the DataSet, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property valueswill be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSetParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).updateDataSetParameterDefinitions(Id, ParameterDefinitions, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSet Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatasetProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSetsApiFetchParamCreator(
        configuration
      ).updateDatasetProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * DataSetsApi - factory interface
 * @export
 */
export const DataSetsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new DataSet CatalogItem.
     * @param {DataSet} DataSet The definition of the new DataSet CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDataSet(DataSet: DataSet, options?: any) {
      return DataSetsApiFp(configuration).addDataSet(DataSet, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Deletes the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataSet(Id: string, options?: any) {
      return DataSetsApiFp(configuration).deleteDataSet(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a DataSet CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSet(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSet(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the value for the specified DataSet column using the given aggregation type.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} ColumnName The name of the DataSet column to aggregate the value for.
     * @param {string} Aggregation The type of aggregation to use on the specified column. Values come from the KpiSharedDataItemAggregation enum.
     * @param {DataSetAggregateValueParameters} [Parameters] An array of DataSet parameters to use when executing the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetAggregatedValue(
      Id: string,
      ColumnName: string,
      Aggregation: string,
      Parameters?: DataSetAggregateValueParameters,
      options?: any
    ) {
      return DataSetsApiFp(configuration).getDataSetAggregatedValue(
        Id,
        ColumnName,
        Aggregation,
        Parameters,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetAllowedActions(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetAllowedActions(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the CacheOption's content for a given DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetCacheOptions(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetCacheOptions(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for a given DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetCacheRefreshPlans(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetCacheRefreshPlans(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the content of the specified DataSet CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetContent(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetContent(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the query results for the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {number} [MaxRows] Specifies the maximum number of rows to return from the query.
     * @param {DataSetDataParameters} [Parameters] An array of DataSet parameters to use when executing the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetData(
      Id: string,
      MaxRows?: number,
      Parameters?: DataSetDataParameters,
      options?: any
    ) {
      return DataSetsApiFp(configuration).getDataSetData(
        Id,
        MaxRows,
        Parameters,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDataSource(Id: string, DataSourceId: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetDataSource(
        Id,
        DataSourceId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the DataSources associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDataSources(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetDataSources(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetDependentItems(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetDependentItems(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetParameterDefinitions(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetParameterDefinitions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified DataSet CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetPolicies(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetPolicies(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the schema for the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetSchema(Id: string, options?: any) {
      return DataSetsApiFp(configuration).getDataSetSchema(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets an array of DataSet CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSets(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return DataSetsApiFp(configuration).getDataSets(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets DataSet Properties (takes list of property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatasetProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ) {
      return DataSetsApiFp(configuration).getDatasetProperties(
        Id,
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces the CacheOption's content for a given DataSet using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the given DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options?: any
    ) {
      return DataSetsApiFp(configuration).setDataSetCacheOptions(
        Id,
        CacheOptions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the DataSet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetDataSource(
      Id: string,
      DataSourceId: string,
      DataSource: DataSource,
      options?: any
    ) {
      return DataSetsApiFp(configuration).setDataSetDataSource(
        Id,
        DataSourceId,
        DataSource,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSource definition associated with the specified DataSet.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the specified DataSet CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetDataSources(Id: string, DataSource: DataSource, options?: any) {
      return DataSetsApiFp(configuration).setDataSetDataSources(
        Id,
        DataSource,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified DataSet item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSetPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ) {
      return DataSetsApiFp(configuration).setDataSetPolicies(
        Id,
        ItemPolicy,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified DataSet CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSet} DataSet Definition of the DataSet item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSet(Id: string, DataSet: DataSet, options?: any) {
      return DataSetsApiFp(configuration).updateDataSet(
        Id,
        DataSet,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the DataSet specified.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the DataSet, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property valueswill be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSetParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options?: any
    ) {
      return DataSetsApiFp(configuration).updateDataSetParameterDefinitions(
        Id,
        ParameterDefinitions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSet Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatasetProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return DataSetsApiFp(configuration).updateDatasetProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * DataSetsApi - object-oriented interface
 * @export
 * @class DataSetsApi
 * @extends {BaseAPI}
 */
export class DataSetsApi extends BaseAPI {
  /**
   *
   * @summary Creates a new DataSet CatalogItem.
   * @param {DataSet} DataSet The definition of the new DataSet CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public addDataSet(DataSet: DataSet, options?: any) {
    return DataSetsApiFp(this.configuration).addDataSet(DataSet, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Deletes the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public deleteDataSet(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).deleteDataSet(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a DataSet CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSet(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSet(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the value for the specified DataSet column using the given aggregation type.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} ColumnName The name of the DataSet column to aggregate the value for.
   * @param {string} Aggregation The type of aggregation to use on the specified column. Values come from the KpiSharedDataItemAggregation enum.
   * @param {DataSetAggregateValueParameters} [Parameters] An array of DataSet parameters to use when executing the query.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetAggregatedValue(
    Id: string,
    ColumnName: string,
    Aggregation: string,
    Parameters?: DataSetAggregateValueParameters,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).getDataSetAggregatedValue(
      Id,
      ColumnName,
      Aggregation,
      Parameters,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetAllowedActions(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the CacheOption's content for a given DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetCacheOptions(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetCacheOptions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the CacheRefreshPlans for a given DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetCacheRefreshPlans(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetCacheRefreshPlans(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the content of the specified DataSet CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetContent(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetContent(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the query results for the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {number} [MaxRows] Specifies the maximum number of rows to return from the query.
   * @param {DataSetDataParameters} [Parameters] An array of DataSet parameters to use when executing the query.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetData(
    Id: string,
    MaxRows?: number,
    Parameters?: DataSetDataParameters,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).getDataSetData(
      Id,
      MaxRows,
      Parameters,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the DataSource specified by the DataSourceId that is associated with the DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetDataSource(Id: string, DataSourceId: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetDataSource(
      Id,
      DataSourceId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the DataSources associated with the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetDataSources(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetDataSources(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Returns a list of CatalogItems that reference the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetDependentItems(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetDependentItems(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the ParameterDefinitions associated with the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetParameterDefinitions(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetParameterDefinitions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets ItemPolicies associated with the specified DataSet CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetPolicies(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetPolicies(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the schema for the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSetSchema(Id: string, options?: any) {
    return DataSetsApiFp(this.configuration).getDataSetSchema(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets an array of DataSet CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDataSets(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).getDataSets(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets DataSet Properties (takes list of property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public getDatasetProperties(
    Id: string,
    properties?: Array<string>,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).getDatasetProperties(
      Id,
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces the CacheOption's content for a given DataSet using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the given DataSet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public setDataSetCacheOptions(
    Id: string,
    CacheOptions: CacheOptions,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).setDataSetCacheOptions(
      Id,
      CacheOptions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSource specified by the DataSourceId that is associated with the DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} DataSourceId The Id of the DataSource associated with the DataSet.
   * @param {DataSource} DataSource Updated definition for the DataSource associated with the DataSet.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public setDataSetDataSource(
    Id: string,
    DataSourceId: string,
    DataSource: DataSource,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).setDataSetDataSource(
      Id,
      DataSourceId,
      DataSource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSource definition associated with the specified DataSet.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {DataSource} DataSource Updated definition for the DataSource associated with the specified DataSet CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public setDataSetDataSources(
    Id: string,
    DataSource: DataSource,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).setDataSetDataSources(
      Id,
      DataSource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the specified DataSet item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public setDataSetPolicies(
    Id: string,
    ItemPolicy: Array<ItemPolicy>,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).setDataSetPolicies(
      Id,
      ItemPolicy,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified DataSet CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {DataSet} DataSet Definition of the DataSet item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public updateDataSet(Id: string, DataSet: DataSet, options?: any) {
    return DataSetsApiFp(this.configuration).updateDataSet(
      Id,
      DataSet,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the ParameterDefinitions associated with the DataSet specified.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the DataSet, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property valueswill be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public updateDataSetParameterDefinitions(
    Id: string,
    ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).updateDataSetParameterDefinitions(
      Id,
      ParameterDefinitions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSet Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSetsApi
   */
  public updateDatasetProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return DataSetsApiFp(this.configuration).updateDatasetProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * DataSourcesApi - fetch parameter creator
 * @export
 */
export const DataSourcesApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new DataSource CatalogItem.
     * @param {DataSource} DataSource The definition of the new DataSource CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDataSource(DataSource: DataSource, options: any = {}): FetchArgs {
      // verify required parameter 'DataSource' is not null or undefined
      if (DataSource === null || DataSource === undefined) {
        throw new RequiredError(
          "DataSource",
          "Required parameter DataSource was null or undefined when calling addDataSource."
        );
      }
      const localVarPath = `/DataSources`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSource || {})
        : DataSource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkExistingDataSourceConnection(
      Id: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling checkExistingDataSourceConnection."
        );
      }
      const localVarPath = `/DataSources({Id})/Model.CheckConnection`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Tests the connection for a data source. This method supports the direct testing of the unsaved data source.
     * @param {DataSource} dataSource The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkNewDataSourceConnection(
      dataSource: DataSource,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'dataSource' is not null or undefined
      if (dataSource === null || dataSource === undefined) {
        throw new RequiredError(
          "dataSource",
          "Required parameter dataSource was null or undefined when calling checkNewDataSourceConnection."
        );
      }
      const localVarPath = `/DataSources/Model.CheckConnection`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(dataSource || {})
        : dataSource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified DataSource.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataSource(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteDataSource."
        );
      }
      const localVarPath = `/DataSources({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a DataSource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSource(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSource."
        );
      }
      const localVarPath = `/DataSources({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSourceAllowedActions."
        );
      }
      const localVarPath = `/DataSources({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of the DataSource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceContent(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSourceContent."
        );
      }
      const localVarPath = `/DataSources({Id})/Content/$value`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDependentItems(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSourceDependentItems."
        );
      }
      const localVarPath = `/DataSources({Id})/DependentItems`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcePolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDataSourcePolicies."
        );
      }
      const localVarPath = `/DataSources({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.
     * @param {QueryFieldsRequest} [QueryFieldsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceQueryFields(
      QueryFieldsRequest?: QueryFieldsRequest,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/DataSources/Model.GetQueryFields`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"QueryFieldsRequest" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(QueryFieldsRequest || {})
        : QueryFieldsRequest || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of DataSource CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSources(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/DataSources`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets DataSource Properties (takes list of property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatasourceProperties(
      Id: string,
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getDatasourceProperties."
        );
      }
      const localVarPath = `/DataSources({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSourcePolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setDataSourcePolicies."
        );
      }
      // verify required parameter 'ItemPolicy' is not null or undefined
      if (ItemPolicy === null || ItemPolicy === undefined) {
        throw new RequiredError(
          "ItemPolicy",
          "Required parameter ItemPolicy was null or undefined when calling setDataSourcePolicies."
        );
      }
      const localVarPath = `/DataSources({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ItemPolicy || {})
        : ItemPolicy || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSource CatalogItem specified by the Id using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Definition of the DataSource item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSource(
      Id: string,
      DataSource: DataSource,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateDataSource."
        );
      }
      // verify required parameter 'DataSource' is not null or undefined
      if (DataSource === null || DataSource === undefined) {
        throw new RequiredError(
          "DataSource",
          "Required parameter DataSource was null or undefined when calling updateDataSource."
        );
      }
      const localVarPath = `/DataSources({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSource || {})
        : DataSource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSource Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatasourceProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateDatasourceProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateDatasourceProperties."
        );
      }
      const localVarPath = `/DataSources({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DataSourcesApi - functional programming interface
 * @export
 */
export const DataSourcesApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new DataSource CatalogItem.
     * @param {DataSource} DataSource The definition of the new DataSource CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDataSource(
      DataSource: DataSource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSource> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).addDataSource(DataSource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkExistingDataSourceConnection(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSourceCheckResult> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).checkExistingDataSourceConnection(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Tests the connection for a data source. This method supports the direct testing of the unsaved data source.
     * @param {DataSource} dataSource The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkNewDataSourceConnection(
      dataSource: DataSource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSourceCheckResult> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).checkNewDataSourceConnection(dataSource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified DataSource.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataSource(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).deleteDataSource(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a DataSource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSource(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSource> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSource(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSourceAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of the DataSource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceContent(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSourceContent(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDependentItems(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDependentItems> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSourceDependentItems(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcePolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSourcePolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.
     * @param {QueryFieldsRequest} [QueryFieldsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceQueryFields(
      QueryFieldsRequest?: QueryFieldsRequest,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataQueryFields> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSourceQueryFields(QueryFieldsRequest, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of DataSource CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSources(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDataSources> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDataSources(top, skip, filter, count, orderBy, select, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets DataSource Properties (takes list of property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatasourceProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).getDatasourceProperties(Id, properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSourcePolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).setDataSourcePolicies(Id, ItemPolicy, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSource CatalogItem specified by the Id using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Definition of the DataSource item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSource(
      Id: string,
      DataSource: DataSource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).updateDataSource(Id, DataSource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSource Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatasourceProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataSourcesApiFetchParamCreator(
        configuration
      ).updateDatasourceProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * DataSourcesApi - factory interface
 * @export
 */
export const DataSourcesApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new DataSource CatalogItem.
     * @param {DataSource} DataSource The definition of the new DataSource CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDataSource(DataSource: DataSource, options?: any) {
      return DataSourcesApiFp(configuration).addDataSource(DataSource, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkExistingDataSourceConnection(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).checkExistingDataSourceConnection(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Tests the connection for a data source. This method supports the direct testing of the unsaved data source.
     * @param {DataSource} dataSource The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkNewDataSourceConnection(dataSource: DataSource, options?: any) {
      return DataSourcesApiFp(configuration).checkNewDataSourceConnection(
        dataSource,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified DataSource.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataSource(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).deleteDataSource(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a DataSource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSource(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).getDataSource(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceAllowedActions(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).getDataSourceAllowedActions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the content of the DataSource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceContent(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).getDataSourceContent(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDependentItems(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).getDataSourceDependentItems(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcePolicies(Id: string, options?: any) {
      return DataSourcesApiFp(configuration).getDataSourcePolicies(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.
     * @param {QueryFieldsRequest} [QueryFieldsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceQueryFields(
      QueryFieldsRequest?: QueryFieldsRequest,
      options?: any
    ) {
      return DataSourcesApiFp(configuration).getDataSourceQueryFields(
        QueryFieldsRequest,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets an array of DataSource CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSources(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return DataSourcesApiFp(configuration).getDataSources(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets DataSource Properties (takes list of property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatasourceProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ) {
      return DataSourcesApiFp(configuration).getDatasourceProperties(
        Id,
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the DataSource specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDataSourcePolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ) {
      return DataSourcesApiFp(configuration).setDataSourcePolicies(
        Id,
        ItemPolicy,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSource CatalogItem specified by the Id using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Definition of the DataSource item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataSource(Id: string, DataSource: DataSource, options?: any) {
      return DataSourcesApiFp(configuration).updateDataSource(
        Id,
        DataSource,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSource Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatasourceProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return DataSourcesApiFp(configuration).updateDatasourceProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * DataSourcesApi - object-oriented interface
 * @export
 * @class DataSourcesApi
 * @extends {BaseAPI}
 */
export class DataSourcesApi extends BaseAPI {
  /**
   *
   * @summary Creates a new DataSource CatalogItem.
   * @param {DataSource} DataSource The definition of the new DataSource CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public addDataSource(DataSource: DataSource, options?: any) {
    return DataSourcesApiFp(this.configuration).addDataSource(
      DataSource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public checkExistingDataSourceConnection(Id: string, options?: any) {
    return DataSourcesApiFp(
      this.configuration
    ).checkExistingDataSourceConnection(Id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Tests the connection for a data source. This method supports the direct testing of the unsaved data source.
   * @param {DataSource} dataSource The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public checkNewDataSourceConnection(dataSource: DataSource, options?: any) {
    return DataSourcesApiFp(this.configuration).checkNewDataSourceConnection(
      dataSource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified DataSource.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public deleteDataSource(Id: string, options?: any) {
    return DataSourcesApiFp(this.configuration).deleteDataSource(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a DataSource CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSource(Id: string, options?: any) {
    return DataSourcesApiFp(this.configuration).getDataSource(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSourceAllowedActions(Id: string, options?: any) {
    return DataSourcesApiFp(this.configuration).getDataSourceAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the content of the DataSource CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSourceContent(Id: string, options?: any) {
    return DataSourcesApiFp(this.configuration).getDataSourceContent(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Returns a list of CatalogItems that reference the DataSource specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSourceDependentItems(Id: string, options?: any) {
    return DataSourcesApiFp(this.configuration).getDataSourceDependentItems(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets ItemPolicies associated with the DataSource specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSourcePolicies(Id: string, options?: any) {
    return DataSourcesApiFp(this.configuration).getDataSourcePolicies(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.
   * @param {QueryFieldsRequest} [QueryFieldsRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSourceQueryFields(
    QueryFieldsRequest?: QueryFieldsRequest,
    options?: any
  ) {
    return DataSourcesApiFp(this.configuration).getDataSourceQueryFields(
      QueryFieldsRequest,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of DataSource CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDataSources(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return DataSourcesApiFp(this.configuration).getDataSources(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets DataSource Properties (takes list of property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public getDatasourceProperties(
    Id: string,
    properties?: Array<string>,
    options?: any
  ) {
    return DataSourcesApiFp(this.configuration).getDatasourceProperties(
      Id,
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the DataSource specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public setDataSourcePolicies(
    Id: string,
    ItemPolicy: Array<ItemPolicy>,
    options?: any
  ) {
    return DataSourcesApiFp(this.configuration).setDataSourcePolicies(
      Id,
      ItemPolicy,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSource CatalogItem specified by the Id using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {DataSource} DataSource Definition of the DataSource item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public updateDataSource(Id: string, DataSource: DataSource, options?: any) {
    return DataSourcesApiFp(this.configuration).updateDataSource(
      Id,
      DataSource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSource Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataSourcesApi
   */
  public updateDatasourceProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return DataSourcesApiFp(this.configuration).updateDatasourceProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * ExtensionsApi - fetch parameter creator
 * @export
 */
export const ExtensionsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Retrieves the ExtensionParameter list for given extension.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtensionParameters(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getExtensionParameters."
        );
      }
      const localVarPath = `/Extensions({Id})/Parameters`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retreives all Extension items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtensions(options: any = {}): FetchArgs {
      const localVarPath = `/Extensions`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Validates extension parameters and returns collection of ExtensionParameter.
     * @param {ExtensionSettings} [ExtensionSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateExtensionParameters(
      ExtensionSettings?: ExtensionSettings,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/Extensions/Model.ValidateExtensionSettings`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ExtensionSettings" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ExtensionSettings || {})
        : ExtensionSettings || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExtensionsApi - functional programming interface
 * @export
 */
export const ExtensionsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieves the ExtensionParameter list for given extension.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtensionParameters(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<Array<ExtensionParameter>> {
      const localVarFetchArgs = ExtensionsApiFetchParamCreator(
        configuration
      ).getExtensionParameters(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Retreives all Extension items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtensions(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Extension>> {
      const localVarFetchArgs = ExtensionsApiFetchParamCreator(
        configuration
      ).getExtensions(options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Validates extension parameters and returns collection of ExtensionParameter.
     * @param {ExtensionSettings} [ExtensionSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateExtensionParameters(
      ExtensionSettings?: ExtensionSettings,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<Array<ExtensionParameter>> {
      const localVarFetchArgs = ExtensionsApiFetchParamCreator(
        configuration
      ).validateExtensionParameters(ExtensionSettings, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ExtensionsApi - factory interface
 * @export
 */
export const ExtensionsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Retrieves the ExtensionParameter list for given extension.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtensionParameters(Id: string, options?: any) {
      return ExtensionsApiFp(configuration).getExtensionParameters(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Retreives all Extension items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtensions(options?: any) {
      return ExtensionsApiFp(configuration).getExtensions(options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Validates extension parameters and returns collection of ExtensionParameter.
     * @param {ExtensionSettings} [ExtensionSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateExtensionParameters(
      ExtensionSettings?: ExtensionSettings,
      options?: any
    ) {
      return ExtensionsApiFp(configuration).validateExtensionParameters(
        ExtensionSettings,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ExtensionsApi - object-oriented interface
 * @export
 * @class ExtensionsApi
 * @extends {BaseAPI}
 */
export class ExtensionsApi extends BaseAPI {
  /**
   *
   * @summary Retrieves the ExtensionParameter list for given extension.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtensionsApi
   */
  public getExtensionParameters(Id: string, options?: any) {
    return ExtensionsApiFp(this.configuration).getExtensionParameters(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Retreives all Extension items.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtensionsApi
   */
  public getExtensions(options?: any) {
    return ExtensionsApiFp(this.configuration).getExtensions(options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Validates extension parameters and returns collection of ExtensionParameter.
   * @param {ExtensionSettings} [ExtensionSettings]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtensionsApi
   */
  public validateExtensionParameters(
    ExtensionSettings?: ExtensionSettings,
    options?: any
  ) {
    return ExtensionsApiFp(this.configuration).validateExtensionParameters(
      ExtensionSettings,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * FavoriteItemsApi - fetch parameter creator
 * @export
 */
export const FavoriteItemsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Retrieves a collection of items of type CatalogItem which have been designated as favorites. Use the OData $expand option to also get the referenced items.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteItems(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/FavoriteItems`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (expand !== undefined) {
        localVarQueryParameter["$expand"] = expand;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Removes a CatalogItem from the list of favorite items.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteItem(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling removeFavoriteItem."
        );
      }
      const localVarPath = `/FavoriteItems({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Designate a CatalogItem as a favorite.
     * @param {FavoriteItem} FavoriteItem The reference to the CatalogItem to be designated as a favorite. It only needs the Id property. Thus, it is not necessary to provide Item property in the payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFavoriteItem(FavoriteItem: FavoriteItem, options: any = {}): FetchArgs {
      // verify required parameter 'FavoriteItem' is not null or undefined
      if (FavoriteItem === null || FavoriteItem === undefined) {
        throw new RequiredError(
          "FavoriteItem",
          "Required parameter FavoriteItem was null or undefined when calling setFavoriteItem."
        );
      }
      const localVarPath = `/FavoriteItems`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FavoriteItem" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(FavoriteItem || {})
        : FavoriteItem || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FavoriteItemsApi - functional programming interface
 * @export
 */
export const FavoriteItemsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieves a collection of items of type CatalogItem which have been designated as favorites. Use the OData $expand option to also get the referenced items.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteItems(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FavoriteItem>> {
      const localVarFetchArgs = FavoriteItemsApiFetchParamCreator(
        configuration
      ).getFavoriteItems(
        top,
        skip,
        filter,
        count,
        orderBy,
        expand,
        select,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Removes a CatalogItem from the list of favorite items.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteItem(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FavoriteItemsApiFetchParamCreator(
        configuration
      ).removeFavoriteItem(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Designate a CatalogItem as a favorite.
     * @param {FavoriteItem} FavoriteItem The reference to the CatalogItem to be designated as a favorite. It only needs the Id property. Thus, it is not necessary to provide Item property in the payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFavoriteItem(
      FavoriteItem: FavoriteItem,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FavoriteItem> {
      const localVarFetchArgs = FavoriteItemsApiFetchParamCreator(
        configuration
      ).setFavoriteItem(FavoriteItem, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * FavoriteItemsApi - factory interface
 * @export
 */
export const FavoriteItemsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Retrieves a collection of items of type CatalogItem which have been designated as favorites. Use the OData $expand option to also get the referenced items.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteItems(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options?: any
    ) {
      return FavoriteItemsApiFp(configuration).getFavoriteItems(
        top,
        skip,
        filter,
        count,
        orderBy,
        expand,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Removes a CatalogItem from the list of favorite items.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteItem(Id: string, options?: any) {
      return FavoriteItemsApiFp(configuration).removeFavoriteItem(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Designate a CatalogItem as a favorite.
     * @param {FavoriteItem} FavoriteItem The reference to the CatalogItem to be designated as a favorite. It only needs the Id property. Thus, it is not necessary to provide Item property in the payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFavoriteItem(FavoriteItem: FavoriteItem, options?: any) {
      return FavoriteItemsApiFp(configuration).setFavoriteItem(
        FavoriteItem,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * FavoriteItemsApi - object-oriented interface
 * @export
 * @class FavoriteItemsApi
 * @extends {BaseAPI}
 */
export class FavoriteItemsApi extends BaseAPI {
  /**
   *
   * @summary Retrieves a collection of items of type CatalogItem which have been designated as favorites. Use the OData $expand option to also get the referenced items.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FavoriteItemsApi
   */
  public getFavoriteItems(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    expand?: string,
    select?: string,
    options?: any
  ) {
    return FavoriteItemsApiFp(this.configuration).getFavoriteItems(
      top,
      skip,
      filter,
      count,
      orderBy,
      expand,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Removes a CatalogItem from the list of favorite items.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FavoriteItemsApi
   */
  public removeFavoriteItem(Id: string, options?: any) {
    return FavoriteItemsApiFp(this.configuration).removeFavoriteItem(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Designate a CatalogItem as a favorite.
   * @param {FavoriteItem} FavoriteItem The reference to the CatalogItem to be designated as a favorite. It only needs the Id property. Thus, it is not necessary to provide Item property in the payload.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FavoriteItemsApi
   */
  public setFavoriteItem(FavoriteItem: FavoriteItem, options?: any) {
    return FavoriteItemsApiFp(this.configuration).setFavoriteItem(
      FavoriteItem,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * FoldersApi - fetch parameter creator
 * @export
 */
export const FoldersApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new Folder CatalogItem.
     * @param {Folder} body The definition of the new Folder CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFolder(body: Folder, options: any = {}): FetchArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling addFolder."
        );
      }
      const localVarPath = `/Folders`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Folder" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteFolder."
        );
      }
      const localVarPath = `/Folders({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a Folder CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getFolder."
        );
      }
      const localVarPath = `/Folders({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getFolderAllowedActions."
        );
      }
      const localVarPath = `/Folders({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of child CatalogItems in the specified folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderCatalogItems(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getFolderCatalogItems."
        );
      }
      const localVarPath = `/Folders({Id})/CatalogItems`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets policies associated with the Folder CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getFolderPolicies."
        );
      }
      const localVarPath = `/Folders({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets Folder Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderProperties(
      Id: string,
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getFolderProperties."
        );
      }
      const localVarPath = `/Folders({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of Folder CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolders(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/Folders`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Searches items in a given folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} searchText Name of item to search in the folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogItemsInFolder(
      Id: string,
      searchText: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling searchCatalogItemsInFolder."
        );
      }
      // verify required parameter 'searchText' is not null or undefined
      if (searchText === null || searchText === undefined) {
        throw new RequiredError(
          "searchText",
          "Required parameter searchText was null or undefined when calling searchCatalogItemsInFolder."
        );
      }
      const localVarPath = `/Folders({Id})/Model.SearchItems(searchText='{searchText}')`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"searchText"}}`, encodeURIComponent(String(searchText)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Folder item specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFolderPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setFolderPolicies."
        );
      }
      // verify required parameter 'ItemPolicy' is not null or undefined
      if (ItemPolicy === null || ItemPolicy === undefined) {
        throw new RequiredError(
          "ItemPolicy",
          "Required parameter ItemPolicy was null or undefined when calling setFolderPolicies."
        );
      }
      const localVarPath = `/Folders({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ItemPolicy || {})
        : ItemPolicy || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified Folder CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Folder} Folder Definition of the Folder item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(Id: string, Folder: Folder, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateFolder."
        );
      }
      // verify required parameter 'Folder' is not null or undefined
      if (Folder === null || Folder === undefined) {
        throw new RequiredError(
          "Folder",
          "Required parameter Folder was null or undefined when calling updateFolder."
        );
      }
      const localVarPath = `/Folders({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Folder" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Folder || {})
        : Folder || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Folder Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateFolderProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateFolderProperties."
        );
      }
      const localVarPath = `/Folders({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new Folder CatalogItem.
     * @param {Folder} body The definition of the new Folder CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFolder(
      body: Folder,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Folder> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).addFolder(body, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).deleteFolder(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a Folder CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Folder> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolder(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolderAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of child CatalogItems in the specified folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderCatalogItems(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataCatalogItems> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolderCatalogItems(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets policies associated with the Folder CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolderPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets Folder Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolderProperties(Id, properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of Folder CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolders(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataFolders> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolders(top, skip, filter, count, orderBy, select, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Searches items in a given folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} searchText Name of item to search in the folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogItemsInFolder(
      Id: string,
      searchText: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDependentItems> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).searchCatalogItemsInFolder(Id, searchText, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Folder item specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFolderPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).setFolderPolicies(Id, ItemPolicy, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified Folder CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Folder} Folder Definition of the Folder item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      Id: string,
      Folder: Folder,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).updateFolder(Id, Folder, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Folder Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).updateFolderProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new Folder CatalogItem.
     * @param {Folder} body The definition of the new Folder CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFolder(body: Folder, options?: any) {
      return FoldersApiFp(configuration).addFolder(body, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Deletes the specified Folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(Id: string, options?: any) {
      return FoldersApiFp(configuration).deleteFolder(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a Folder CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(Id: string, options?: any) {
      return FoldersApiFp(configuration).getFolder(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderAllowedActions(Id: string, options?: any) {
      return FoldersApiFp(configuration).getFolderAllowedActions(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of child CatalogItems in the specified folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderCatalogItems(Id: string, options?: any) {
      return FoldersApiFp(configuration).getFolderCatalogItems(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets policies associated with the Folder CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderPolicies(Id: string, options?: any) {
      return FoldersApiFp(configuration).getFolderPolicies(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets Folder Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderProperties(Id: string, properties?: Array<string>, options?: any) {
      return FoldersApiFp(configuration).getFolderProperties(
        Id,
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets an array of Folder CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolders(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).getFolders(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Searches items in a given folder.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} searchText Name of item to search in the folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogItemsInFolder(Id: string, searchText: string, options?: any) {
      return FoldersApiFp(configuration).searchCatalogItemsInFolder(
        Id,
        searchText,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Folder item specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFolderPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ) {
      return FoldersApiFp(configuration).setFolderPolicies(
        Id,
        ItemPolicy,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified Folder CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Folder} Folder Definition of the Folder item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(Id: string, Folder: Folder, options?: any) {
      return FoldersApiFp(configuration).updateFolder(
        Id,
        Folder,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Folder Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return FoldersApiFp(configuration).updateFolderProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export class FoldersApi extends BaseAPI {
  /**
   *
   * @summary Creates a new Folder CatalogItem.
   * @param {Folder} body The definition of the new Folder CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public addFolder(body: Folder, options?: any) {
    return FoldersApiFp(this.configuration).addFolder(body, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Deletes the specified Folder.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public deleteFolder(Id: string, options?: any) {
    return FoldersApiFp(this.configuration).deleteFolder(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a Folder CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolder(Id: string, options?: any) {
    return FoldersApiFp(this.configuration).getFolder(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolderAllowedActions(Id: string, options?: any) {
    return FoldersApiFp(this.configuration).getFolderAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets a list of child CatalogItems in the specified folder.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolderCatalogItems(Id: string, options?: any) {
    return FoldersApiFp(this.configuration).getFolderCatalogItems(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets policies associated with the Folder CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolderPolicies(Id: string, options?: any) {
    return FoldersApiFp(this.configuration).getFolderPolicies(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets Folder Properties (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolderProperties(
    Id: string,
    properties?: Array<string>,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFolderProperties(
      Id,
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of Folder CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolders(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFolders(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Searches items in a given folder.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} searchText Name of item to search in the folder.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public searchCatalogItemsInFolder(
    Id: string,
    searchText: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).searchCatalogItemsInFolder(
      Id,
      searchText,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the Folder item specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public setFolderPolicies(
    Id: string,
    ItemPolicy: Array<ItemPolicy>,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).setFolderPolicies(
      Id,
      ItemPolicy,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified Folder CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Folder} Folder Definition of the Folder item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public updateFolder(Id: string, Folder: Folder, options?: any) {
    return FoldersApiFp(this.configuration).updateFolder(
      Id,
      Folder,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Folder Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public updateFolderProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).updateFolderProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * KpisApi - fetch parameter creator
 * @export
 */
export const KpisApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new Kpi CatalogItem.
     * @param {Kpi} Kpi The definition of the new KPI CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addKpi(Kpi: Kpi, options: any = {}): FetchArgs {
      // verify required parameter 'Kpi' is not null or undefined
      if (Kpi === null || Kpi === undefined) {
        throw new RequiredError(
          "Kpi",
          "Required parameter Kpi was null or undefined when calling addKpi."
        );
      }
      const localVarPath = `/Kpis`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Kpi" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Kpi || {})
        : Kpi || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Kpi.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKpi(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteKpi."
        );
      }
      const localVarPath = `/Kpis({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a Kpi CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpi(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getKpi."
        );
      }
      const localVarPath = `/Kpis({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getKpiAllowedActions."
        );
      }
      const localVarPath = `/Kpis({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the Kpi CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getKpiPolicies."
        );
      }
      const localVarPath = `/Kpis({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets Kpi Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiProperties(
      Id: string,
      Properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getKpiProperties."
        );
      }
      const localVarPath = `/Kpis({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (Properties) {
        localVarQueryParameter["Properties"] = Properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of Kpi CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpis(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/Kpis`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Kpi specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setKpiPolicies(
      Id: string,
      ItemPolicies: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setKpiPolicies."
        );
      }
      // verify required parameter 'ItemPolicies' is not null or undefined
      if (ItemPolicies === null || ItemPolicies === undefined) {
        throw new RequiredError(
          "ItemPolicies",
          "Required parameter ItemPolicies was null or undefined when calling setKpiPolicies."
        );
      }
      const localVarPath = `/Kpis({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ItemPolicies || {})
        : ItemPolicies || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified Kpi CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Kpi} Kpi Definition of the KPI item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKpi(Id: string, Kpi: Kpi, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateKpi."
        );
      }
      // verify required parameter 'Kpi' is not null or undefined
      if (Kpi === null || Kpi === undefined) {
        throw new RequiredError(
          "Kpi",
          "Required parameter Kpi was null or undefined when calling updateKpi."
        );
      }
      const localVarPath = `/Kpis({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Kpi" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Kpi || {})
        : Kpi || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Kpi Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKpiProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateKpiProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateKpiProperties."
        );
      }
      const localVarPath = `/Kpis({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * KpisApi - functional programming interface
 * @export
 */
export const KpisApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new Kpi CatalogItem.
     * @param {Kpi} Kpi The definition of the new KPI CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addKpi(
      Kpi: Kpi,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Kpi> {
      const localVarFetchArgs = KpisApiFetchParamCreator(configuration).addKpi(
        Kpi,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Kpi.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKpi(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).deleteKpi(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a Kpi CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpi(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Kpi> {
      const localVarFetchArgs = KpisApiFetchParamCreator(configuration).getKpi(
        Id,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).getKpiAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the Kpi CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).getKpiPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets Kpi Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiProperties(
      Id: string,
      Properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).getKpiProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of Kpi CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpis(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataKpis> {
      const localVarFetchArgs = KpisApiFetchParamCreator(configuration).getKpis(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Kpi specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setKpiPolicies(
      Id: string,
      ItemPolicies: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).setKpiPolicies(Id, ItemPolicies, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified Kpi CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Kpi} Kpi Definition of the KPI item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKpi(
      Id: string,
      Kpi: Kpi,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).updateKpi(Id, Kpi, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Kpi Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKpiProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = KpisApiFetchParamCreator(
        configuration
      ).updateKpiProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * KpisApi - factory interface
 * @export
 */
export const KpisApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new Kpi CatalogItem.
     * @param {Kpi} Kpi The definition of the new KPI CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addKpi(Kpi: Kpi, options?: any) {
      return KpisApiFp(configuration).addKpi(Kpi, options)(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified Kpi.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKpi(Id: string, options?: any) {
      return KpisApiFp(configuration).deleteKpi(Id, options)(fetch, basePath);
    },
    /**
     *
     * @summary Gets a Kpi CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpi(Id: string, options?: any) {
      return KpisApiFp(configuration).getKpi(Id, options)(fetch, basePath);
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiAllowedActions(Id: string, options?: any) {
      return KpisApiFp(configuration).getKpiAllowedActions(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the Kpi CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiPolicies(Id: string, options?: any) {
      return KpisApiFp(configuration).getKpiPolicies(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets Kpi Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpiProperties(Id: string, Properties?: Array<string>, options?: any) {
      return KpisApiFp(configuration).getKpiProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets an array of Kpi CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKpis(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return KpisApiFp(configuration).getKpis(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Kpi specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setKpiPolicies(Id: string, ItemPolicies: Array<ItemPolicy>, options?: any) {
      return KpisApiFp(configuration).setKpiPolicies(
        Id,
        ItemPolicies,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified Kpi CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Kpi} Kpi Definition of the KPI item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKpi(Id: string, Kpi: Kpi, options?: any) {
      return KpisApiFp(configuration).updateKpi(
        Id,
        Kpi,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Kpi Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKpiProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return KpisApiFp(configuration).updateKpiProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * KpisApi - object-oriented interface
 * @export
 * @class KpisApi
 * @extends {BaseAPI}
 */
export class KpisApi extends BaseAPI {
  /**
   *
   * @summary Creates a new Kpi CatalogItem.
   * @param {Kpi} Kpi The definition of the new KPI CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public addKpi(Kpi: Kpi, options?: any) {
    return KpisApiFp(this.configuration).addKpi(Kpi, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Deletes the specified Kpi.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public deleteKpi(Id: string, options?: any) {
    return KpisApiFp(this.configuration).deleteKpi(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a Kpi CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public getKpi(Id: string, options?: any) {
    return KpisApiFp(this.configuration).getKpi(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public getKpiAllowedActions(Id: string, options?: any) {
    return KpisApiFp(this.configuration).getKpiAllowedActions(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets ItemPolicies associated with the Kpi CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public getKpiPolicies(Id: string, options?: any) {
    return KpisApiFp(this.configuration).getKpiPolicies(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets Kpi Properties (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [Properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public getKpiProperties(
    Id: string,
    Properties?: Array<string>,
    options?: any
  ) {
    return KpisApiFp(this.configuration).getKpiProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of Kpi CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public getKpis(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return KpisApiFp(this.configuration).getKpis(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the Kpi specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public setKpiPolicies(
    Id: string,
    ItemPolicies: Array<ItemPolicy>,
    options?: any
  ) {
    return KpisApiFp(this.configuration).setKpiPolicies(
      Id,
      ItemPolicies,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified Kpi CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Kpi} Kpi Definition of the KPI item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public updateKpi(Id: string, Kpi: Kpi, options?: any) {
    return KpisApiFp(this.configuration).updateKpi(
      Id,
      Kpi,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Kpi Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof KpisApi
   */
  public updateKpiProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return KpisApiFp(this.configuration).updateKpiProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * LinkedReportsApi - fetch parameter creator
 * @export
 */
export const LinkedReportsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new LinkedReport CatalogItem.
     * @param {LinkedReport} LinkedReport The definition of the new LinkedReport CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReport(LinkedReport: LinkedReport, options: any = {}): FetchArgs {
      // verify required parameter 'LinkedReport' is not null or undefined
      if (LinkedReport === null || LinkedReport === undefined) {
        throw new RequiredError(
          "LinkedReport",
          "Required parameter LinkedReport was null or undefined when calling addLinkedReport."
        );
      }
      const localVarPath = `/LinkedReports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"LinkedReport" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(LinkedReport || {})
        : LinkedReport || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReportComment(
      Id: string,
      Comment: Comment,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling addLinkedReportComment."
        );
      }
      // verify required parameter 'Comment' is not null or undefined
      if (Comment === null || Comment === undefined) {
        throw new RequiredError(
          "Comment",
          "Required parameter Comment was null or undefined when calling addLinkedReportComment."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Comments`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Comment" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Comment || {})
        : Comment || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates new HistorySnapshot
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReportHistorySnapshot(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling addLinkedReportHistorySnapshot."
        );
      }
      const localVarPath = `/LinkedReports({Id})/HistorySnapshots`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReport(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteLinkedReport."
        );
      }
      const localVarPath = `/LinkedReports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReportComment(
      Id: string,
      CommentId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteLinkedReportComment."
        );
      }
      // verify required parameter 'CommentId' is not null or undefined
      if (CommentId === null || CommentId === undefined) {
        throw new RequiredError(
          "CommentId",
          "Required parameter CommentId was null or undefined when calling deleteLinkedReportComment."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Comments({CommentId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"CommentId"}}`, encodeURIComponent(String(CommentId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes a HistorySnapshot specified by HistoryId from the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The Id property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteLinkedReportHistorySnapshot."
        );
      }
      // verify required parameter 'HistoryId' is not null or undefined
      if (HistoryId === null || HistoryId === undefined) {
        throw new RequiredError(
          "HistoryId",
          "Required parameter HistoryId was null or undefined when calling deleteLinkedReportHistorySnapshot."
        );
      }
      const localVarPath = `/LinkedReports({Id})/HistorySnapshots({HistoryId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"HistoryId"}}`, encodeURIComponent(String(HistoryId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a LinkedReport CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReport(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReport."
        );
      }
      const localVarPath = `/LinkedReports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportAllowedActions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of CacheOptions for the LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportCacheOptions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportCacheOptions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/CacheOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for a LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportCacheRefreshPlans(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportCacheRefreshPlans."
        );
      }
      const localVarPath = `/LinkedReports({Id})/CacheRefreshPlans`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Comments for a LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportComments(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportComments."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Comments`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The Id property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportHistorySnapshot."
        );
      }
      // verify required parameter 'HistoryId' is not null or undefined
      if (HistoryId === null || HistoryId === undefined) {
        throw new RequiredError(
          "HistoryId",
          "Required parameter HistoryId was null or undefined when calling getLinkedReportHistorySnapshot."
        );
      }
      const localVarPath = `/LinkedReports({Id})/HistorySnapshots({HistoryId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"HistoryId"}}`, encodeURIComponent(String(HistoryId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets HistorySnapshotOptions for the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshotOptions(
      Id: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportHistorySnapshotOptions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/HistorySnapshotOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a list of HistorySnapshots of the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshots(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportHistorySnapshots."
        );
      }
      const localVarPath = `/LinkedReports({Id})/HistorySnapshots`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportParameterDefinitions(
      Id: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportParameterDefinitions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/ParameterDefinitions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified LinkedReport CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportPolicies."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets LinkedReport Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportProperties(
      Id: string,
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getLinkedReportProperties."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of LinkedReport CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/LinkedReports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces the CacheOption's content for a given LinkedReport using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the LinkedReport specified by the Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setLinkedReportCacheOptions."
        );
      }
      // verify required parameter 'CacheOptions' is not null or undefined
      if (CacheOptions === null || CacheOptions === undefined) {
        throw new RequiredError(
          "CacheOptions",
          "Required parameter CacheOptions was null or undefined when calling setLinkedReportCacheOptions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/CacheOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CacheOptions" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CacheOptions || {})
        : CacheOptions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates HistorySnapshotOptions property.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportHistorySnapshotOptions(
      Id: string,
      HistorySnapshotOptions: HistorySnapshotOptions,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setLinkedReportHistorySnapshotOptions."
        );
      }
      // verify required parameter 'HistorySnapshotOptions' is not null or undefined
      if (
        HistorySnapshotOptions === null ||
        HistorySnapshotOptions === undefined
      ) {
        throw new RequiredError(
          "HistorySnapshotOptions",
          "Required parameter HistorySnapshotOptions was null or undefined when calling setLinkedReportHistorySnapshotOptions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/HistorySnapshotOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"HistorySnapshotOptions" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(HistorySnapshotOptions || {})
        : HistorySnapshotOptions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified LinkedReport item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setLinkedReportPolicies."
        );
      }
      // verify required parameter 'ItemPolicy' is not null or undefined
      if (ItemPolicy === null || ItemPolicy === undefined) {
        throw new RequiredError(
          "ItemPolicy",
          "Required parameter ItemPolicy was null or undefined when calling setLinkedReportPolicies."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ItemPolicy || {})
        : ItemPolicy || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified LinkedReport CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {LinkedReport} LinkedReport Definition of the LinkedReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReport(
      Id: string,
      LinkedReport: LinkedReport,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateLinkedReport."
        );
      }
      // verify required parameter 'LinkedReport' is not null or undefined
      if (LinkedReport === null || LinkedReport === undefined) {
        throw new RequiredError(
          "LinkedReport",
          "Required parameter LinkedReport was null or undefined when calling updateLinkedReport."
        );
      }
      const localVarPath = `/LinkedReports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"LinkedReport" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(LinkedReport || {})
        : LinkedReport || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateLinkedReportComment."
        );
      }
      // verify required parameter 'CommentId' is not null or undefined
      if (CommentId === null || CommentId === undefined) {
        throw new RequiredError(
          "CommentId",
          "Required parameter CommentId was null or undefined when calling updateLinkedReportComment."
        );
      }
      // verify required parameter 'Comment' is not null or undefined
      if (Comment === null || Comment === undefined) {
        throw new RequiredError(
          "Comment",
          "Required parameter Comment was null or undefined when calling updateLinkedReportComment."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Comments({CommentId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"CommentId"}}`, encodeURIComponent(String(CommentId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Comment" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Comment || {})
        : Comment || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the specified LinkedReport by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the LinkedReport, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateLinkedReportParameterDefinitions."
        );
      }
      // verify required parameter 'ParameterDefinitions' is not null or undefined
      if (ParameterDefinitions === null || ParameterDefinitions === undefined) {
        throw new RequiredError(
          "ParameterDefinitions",
          "Required parameter ParameterDefinitions was null or undefined when calling updateLinkedReportParameterDefinitions."
        );
      }
      const localVarPath = `/LinkedReports({Id})/ParameterDefinitions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ReportParameterDefinitionPatch&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ParameterDefinitions || {})
        : ParameterDefinitions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the LinkedReport Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateLinkedReportProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateLinkedReportProperties."
        );
      }
      const localVarPath = `/LinkedReports({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LinkedReportsApi - functional programming interface
 * @export
 */
export const LinkedReportsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new LinkedReport CatalogItem.
     * @param {LinkedReport} LinkedReport The definition of the new LinkedReport CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReport(
      LinkedReport: LinkedReport,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<LinkedReport> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).addLinkedReport(LinkedReport, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReportComment(
      Id: string,
      Comment: Comment,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).addLinkedReportComment(Id, Comment, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Creates new HistorySnapshot
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReportHistorySnapshot(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).addLinkedReportHistorySnapshot(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReport(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).deleteLinkedReport(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReportComment(
      Id: string,
      CommentId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).deleteLinkedReportComment(Id, CommentId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes a HistorySnapshot specified by HistoryId from the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The Id property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).deleteLinkedReportHistorySnapshot(Id, HistoryId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a LinkedReport CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReport(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<LinkedReport> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReport(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of CacheOptions for the LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportCacheOptions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CacheOptions> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportCacheOptions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for a LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportCacheRefreshPlans(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<ODataCacheRefreshPlans> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportCacheRefreshPlans(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the Comments for a LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportComments(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataComments> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportComments(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The Id property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<HistorySnapshot> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportHistorySnapshot(Id, HistoryId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets HistorySnapshotOptions for the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshotOptions(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<HistorySnapshotOptions> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportHistorySnapshotOptions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Get a list of HistorySnapshots of the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshots(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<Array<HistorySnapshot>> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportHistorySnapshots(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportParameterDefinitions(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<ODataReportParameterDefinitions> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportParameterDefinitions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified LinkedReport CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets LinkedReport Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReportProperties(Id, properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of LinkedReport CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataLinkedReports> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).getLinkedReports(top, skip, filter, count, orderBy, select, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces the CacheOption's content for a given LinkedReport using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the LinkedReport specified by the Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).setLinkedReportCacheOptions(Id, CacheOptions, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates HistorySnapshotOptions property.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportHistorySnapshotOptions(
      Id: string,
      HistorySnapshotOptions: HistorySnapshotOptions,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).setLinkedReportHistorySnapshotOptions(
        Id,
        HistorySnapshotOptions,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified LinkedReport item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).setLinkedReportPolicies(Id, ItemPolicy, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified LinkedReport CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {LinkedReport} LinkedReport Definition of the LinkedReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReport(
      Id: string,
      LinkedReport: LinkedReport,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).updateLinkedReport(Id, LinkedReport, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).updateLinkedReportComment(Id, CommentId, Comment, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the specified LinkedReport by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the LinkedReport, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).updateLinkedReportParameterDefinitions(
        Id,
        ParameterDefinitions,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the LinkedReport Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LinkedReportsApiFetchParamCreator(
        configuration
      ).updateLinkedReportProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * LinkedReportsApi - factory interface
 * @export
 */
export const LinkedReportsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new LinkedReport CatalogItem.
     * @param {LinkedReport} LinkedReport The definition of the new LinkedReport CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReport(LinkedReport: LinkedReport, options?: any) {
      return LinkedReportsApiFp(configuration).addLinkedReport(
        LinkedReport,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReportComment(Id: string, Comment: Comment, options?: any) {
      return LinkedReportsApiFp(configuration).addLinkedReportComment(
        Id,
        Comment,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Creates new HistorySnapshot
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLinkedReportHistorySnapshot(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).addLinkedReportHistorySnapshot(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReport(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).deleteLinkedReport(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReportComment(Id: string, CommentId: string, options?: any) {
      return LinkedReportsApiFp(configuration).deleteLinkedReportComment(
        Id,
        CommentId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes a HistorySnapshot specified by HistoryId from the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The Id property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLinkedReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options?: any
    ) {
      return LinkedReportsApiFp(
        configuration
      ).deleteLinkedReportHistorySnapshot(
        Id,
        HistoryId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets a LinkedReport CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReport(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReport(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportAllowedActions(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReportAllowedActions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the content of CacheOptions for the LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportCacheOptions(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReportCacheOptions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for a LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportCacheRefreshPlans(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReportCacheRefreshPlans(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the Comments for a LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportComments(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReportComments(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The Id property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).getLinkedReportHistorySnapshot(
        Id,
        HistoryId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets HistorySnapshotOptions for the specified LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshotOptions(Id: string, options?: any) {
      return LinkedReportsApiFp(
        configuration
      ).getLinkedReportHistorySnapshotOptions(Id, options)(fetch, basePath);
    },
    /**
     *
     * @summary Get a list of HistorySnapshots of the LinkedReport specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportHistorySnapshots(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReportHistorySnapshots(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the LinkedReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportParameterDefinitions(Id: string, options?: any) {
      return LinkedReportsApiFp(
        configuration
      ).getLinkedReportParameterDefinitions(Id, options)(fetch, basePath);
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the specified LinkedReport CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportPolicies(Id: string, options?: any) {
      return LinkedReportsApiFp(configuration).getLinkedReportPolicies(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets LinkedReport Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReportProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).getLinkedReportProperties(
        Id,
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets an array of LinkedReport CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).getLinkedReports(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces the CacheOption's content for a given LinkedReport using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the LinkedReport specified by the Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).setLinkedReportCacheOptions(
        Id,
        CacheOptions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates HistorySnapshotOptions property.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportHistorySnapshotOptions(
      Id: string,
      HistorySnapshotOptions: HistorySnapshotOptions,
      options?: any
    ) {
      return LinkedReportsApiFp(
        configuration
      ).setLinkedReportHistorySnapshotOptions(
        Id,
        HistorySnapshotOptions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the specified LinkedReport item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLinkedReportPolicies(
      Id: string,
      ItemPolicy: Array<ItemPolicy>,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).setLinkedReportPolicies(
        Id,
        ItemPolicy,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified LinkedReport CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {LinkedReport} LinkedReport Definition of the LinkedReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReport(Id: string, LinkedReport: LinkedReport, options?: any) {
      return LinkedReportsApiFp(configuration).updateLinkedReport(
        Id,
        LinkedReport,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated LinkedReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).updateLinkedReportComment(
        Id,
        CommentId,
        Comment,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the specified LinkedReport by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the LinkedReport, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options?: any
    ) {
      return LinkedReportsApiFp(
        configuration
      ).updateLinkedReportParameterDefinitions(
        Id,
        ParameterDefinitions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the LinkedReport Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkedReportProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return LinkedReportsApiFp(configuration).updateLinkedReportProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * LinkedReportsApi - object-oriented interface
 * @export
 * @class LinkedReportsApi
 * @extends {BaseAPI}
 */
export class LinkedReportsApi extends BaseAPI {
  /**
   *
   * @summary Creates a new LinkedReport CatalogItem.
   * @param {LinkedReport} LinkedReport The definition of the new LinkedReport CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public addLinkedReport(LinkedReport: LinkedReport, options?: any) {
    return LinkedReportsApiFp(this.configuration).addLinkedReport(
      LinkedReport,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Creates a new Comment associated to the specified LinkedReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Comment} Comment The Comment to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public addLinkedReportComment(Id: string, Comment: Comment, options?: any) {
    return LinkedReportsApiFp(this.configuration).addLinkedReportComment(
      Id,
      Comment,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Creates new HistorySnapshot
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public addLinkedReportHistorySnapshot(Id: string, options?: any) {
    return LinkedReportsApiFp(
      this.configuration
    ).addLinkedReportHistorySnapshot(Id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified LinkedReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public deleteLinkedReport(Id: string, options?: any) {
    return LinkedReportsApiFp(this.configuration).deleteLinkedReport(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified Comment associated to the LinkedReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} CommentId The Id of the Comment.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public deleteLinkedReportComment(
    Id: string,
    CommentId: string,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).deleteLinkedReportComment(
      Id,
      CommentId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes a HistorySnapshot specified by HistoryId from the LinkedReport specified by Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} HistoryId The Id property of the HistorySnapshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public deleteLinkedReportHistorySnapshot(
    Id: string,
    HistoryId: string,
    options?: any
  ) {
    return LinkedReportsApiFp(
      this.configuration
    ).deleteLinkedReportHistorySnapshot(
      Id,
      HistoryId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets a LinkedReport CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReport(Id: string, options?: any) {
    return LinkedReportsApiFp(this.configuration).getLinkedReport(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportAllowedActions(Id: string, options?: any) {
    return LinkedReportsApiFp(this.configuration).getLinkedReportAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the content of CacheOptions for the LinkedReport specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportCacheOptions(Id: string, options?: any) {
    return LinkedReportsApiFp(this.configuration).getLinkedReportCacheOptions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the CacheRefreshPlans for a LinkedReport specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportCacheRefreshPlans(Id: string, options?: any) {
    return LinkedReportsApiFp(
      this.configuration
    ).getLinkedReportCacheRefreshPlans(Id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the Comments for a LinkedReport specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportComments(Id: string, options?: any) {
    return LinkedReportsApiFp(this.configuration).getLinkedReportComments(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport specified by Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} HistoryId The Id property of the HistorySnapshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportHistorySnapshot(
    Id: string,
    HistoryId: string,
    options?: any
  ) {
    return LinkedReportsApiFp(
      this.configuration
    ).getLinkedReportHistorySnapshot(
      Id,
      HistoryId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets HistorySnapshotOptions for the specified LinkedReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportHistorySnapshotOptions(Id: string, options?: any) {
    return LinkedReportsApiFp(
      this.configuration
    ).getLinkedReportHistorySnapshotOptions(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Get a list of HistorySnapshots of the LinkedReport specified by Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportHistorySnapshots(Id: string, options?: any) {
    return LinkedReportsApiFp(
      this.configuration
    ).getLinkedReportHistorySnapshots(Id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the ParameterDefinitions associated with the LinkedReport specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportParameterDefinitions(Id: string, options?: any) {
    return LinkedReportsApiFp(
      this.configuration
    ).getLinkedReportParameterDefinitions(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets ItemPolicies associated with the specified LinkedReport CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportPolicies(Id: string, options?: any) {
    return LinkedReportsApiFp(this.configuration).getLinkedReportPolicies(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets LinkedReport Properties (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReportProperties(
    Id: string,
    properties?: Array<string>,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).getLinkedReportProperties(
      Id,
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of LinkedReport CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public getLinkedReports(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).getLinkedReports(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces the CacheOption's content for a given LinkedReport using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {CacheOptions} CacheOptions Updated definition for the CacheOption&#39;s content associated with the LinkedReport specified by the Id.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public setLinkedReportCacheOptions(
    Id: string,
    CacheOptions: CacheOptions,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).setLinkedReportCacheOptions(
      Id,
      CacheOptions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates HistorySnapshotOptions property.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public setLinkedReportHistorySnapshotOptions(
    Id: string,
    HistorySnapshotOptions: HistorySnapshotOptions,
    options?: any
  ) {
    return LinkedReportsApiFp(
      this.configuration
    ).setLinkedReportHistorySnapshotOptions(
      Id,
      HistorySnapshotOptions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the specified LinkedReport item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} ItemPolicy The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public setLinkedReportPolicies(
    Id: string,
    ItemPolicy: Array<ItemPolicy>,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).setLinkedReportPolicies(
      Id,
      ItemPolicy,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified LinkedReport CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {LinkedReport} LinkedReport Definition of the LinkedReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public updateLinkedReport(
    Id: string,
    LinkedReport: LinkedReport,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).updateLinkedReport(
      Id,
      LinkedReport,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Comment specified by CommentId in the associated LinkedReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} CommentId The Id of the Comment.
   * @param {Comment} Comment The Comment to be updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public updateLinkedReportComment(
    Id: string,
    CommentId: string,
    Comment: Comment,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).updateLinkedReportComment(
      Id,
      CommentId,
      Comment,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the ParameterDefinitions associated with the specified LinkedReport by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the LinkedReport, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public updateLinkedReportParameterDefinitions(
    Id: string,
    ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
    options?: any
  ) {
    return LinkedReportsApiFp(
      this.configuration
    ).updateLinkedReportParameterDefinitions(
      Id,
      ParameterDefinitions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the LinkedReport Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedReportsApi
   */
  public updateLinkedReportProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return LinkedReportsApiFp(this.configuration).updateLinkedReportProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * MeApi - fetch parameter creator
 * @export
 */
export const MeApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Gets the User object for the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetails(options: any = {}): FetchArgs {
      const localVarPath = `/Me`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Gets the User object for the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetails(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
      const localVarFetchArgs = MeApiFetchParamCreator(
        configuration
      ).getUserDetails(options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Gets the User object for the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetails(options?: any) {
      return MeApiFp(configuration).getUserDetails(options)(fetch, basePath);
    },
  };
};

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI {
  /**
   *
   * @summary Gets the User object for the current user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getUserDetails(options?: any) {
    return MeApiFp(this.configuration).getUserDetails(options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * MobileReportsApi - fetch parameter creator
 * @export
 */
export const MobileReportsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates new MobileReport item
     * @param {MobileReport} body The definition of the new MobileReport item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMobileReport(body: MobileReport, options: any = {}): FetchArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling addMobileReport."
        );
      }
      const localVarPath = `/MobileReports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"MobileReport" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMobileReportComment(
      Id: string,
      Comment: Comment,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling addMobileReportComment."
        );
      }
      // verify required parameter 'Comment' is not null or undefined
      if (Comment === null || Comment === undefined) {
        throw new RequiredError(
          "Comment",
          "Required parameter Comment was null or undefined when calling addMobileReportComment."
        );
      }
      const localVarPath = `/MobileReports({Id})/Comments`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Comment" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Comment || {})
        : Comment || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the specified MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMobileReport(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteMobileReport."
        );
      }
      const localVarPath = `/MobileReports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMobileReportComment(
      Id: string,
      CommentId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteMobileReportComment."
        );
      }
      // verify required parameter 'CommentId' is not null or undefined
      if (CommentId === null || CommentId === undefined) {
        throw new RequiredError(
          "CommentId",
          "Required parameter CommentId was null or undefined when calling deleteMobileReportComment."
        );
      }
      const localVarPath = `/MobileReports({Id})/Comments({CommentId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"CommentId"}}`, encodeURIComponent(String(CommentId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch MobileReport item by Id or path property.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReport(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getMobileReport."
        );
      }
      const localVarPath = `/MobileReports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getMobileReportAllowedActions."
        );
      }
      const localVarPath = `/MobileReports({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Comments for a MobileReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportComments(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getMobileReportComments."
        );
      }
      const localVarPath = `/MobileReports({Id})/Comments`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of the specified MobileReport CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportContent(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getMobileReportContent."
        );
      }
      const localVarPath = `/MobileReports({Id})/Content/$value`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the MobileReport catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getMobileReportPolicies."
        );
      }
      const localVarPath = `/MobileReports({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets MobileReport Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportProperties(
      Id: string,
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getMobileReportProperties."
        );
      }
      const localVarPath = `/MobileReports({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve array of MobileReport catalog items.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/MobileReports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sets ItemPolicies on the MobileReport item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} MobileReports Array of ItemPolicies to set on the MobileReport CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setMobileReportPolicies(
      Id: string,
      MobileReports: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setMobileReportPolicies."
        );
      }
      // verify required parameter 'MobileReports' is not null or undefined
      if (MobileReports === null || MobileReports === undefined) {
        throw new RequiredError(
          "MobileReports",
          "Required parameter MobileReports was null or undefined when calling setMobileReportPolicies."
        );
      }
      const localVarPath = `/MobileReports({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(MobileReports || {})
        : MobileReports || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified MobileReport CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {MobileReport} body Definition of the MobileReport item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReport(
      Id: string,
      body: MobileReport,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateMobileReport."
        );
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling updateMobileReport."
        );
      }
      const localVarPath = `/MobileReports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"MobileReport" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateMobileReportComment."
        );
      }
      // verify required parameter 'CommentId' is not null or undefined
      if (CommentId === null || CommentId === undefined) {
        throw new RequiredError(
          "CommentId",
          "Required parameter CommentId was null or undefined when calling updateMobileReportComment."
        );
      }
      // verify required parameter 'Comment' is not null or undefined
      if (Comment === null || Comment === undefined) {
        throw new RequiredError(
          "Comment",
          "Required parameter Comment was null or undefined when calling updateMobileReportComment."
        );
      }
      const localVarPath = `/MobileReports({Id})/Comments({CommentId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"CommentId"}}`, encodeURIComponent(String(CommentId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Comment" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Comment || {})
        : Comment || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the MobileReport properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReportProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateMobileReportProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateMobileReportProperties."
        );
      }
      const localVarPath = `/MobileReports({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MobileReportsApi - functional programming interface
 * @export
 */
export const MobileReportsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates new MobileReport item
     * @param {MobileReport} body The definition of the new MobileReport item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMobileReport(
      body: MobileReport,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MobileReport> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).addMobileReport(body, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMobileReportComment(
      Id: string,
      Comment: Comment,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).addMobileReportComment(Id, Comment, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Delete the specified MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMobileReport(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).deleteMobileReport(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMobileReportComment(
      Id: string,
      CommentId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).deleteMobileReportComment(Id, CommentId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Fetch MobileReport item by Id or path property.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReport(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MobileReport> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReport(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReportAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the Comments for a MobileReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportComments(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataComments> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReportComments(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of the specified MobileReport CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportContent(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReportContent(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the MobileReport catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReportPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets MobileReport Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReportProperties(Id, properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Retrieve array of MobileReport catalog items.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataMobileReport> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).getMobileReports(top, skip, filter, count, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Sets ItemPolicies on the MobileReport item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} MobileReports Array of ItemPolicies to set on the MobileReport CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setMobileReportPolicies(
      Id: string,
      MobileReports: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).setMobileReportPolicies(Id, MobileReports, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified MobileReport CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {MobileReport} body Definition of the MobileReport item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReport(
      Id: string,
      body: MobileReport,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MobileReport> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).updateMobileReport(Id, body, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return !response.bodyUsed ? Promise.resolve(response) : response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).updateMobileReportComment(Id, CommentId, Comment, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the MobileReport properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReportProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MobileReportsApiFetchParamCreator(
        configuration
      ).updateMobileReportProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * MobileReportsApi - factory interface
 * @export
 */
export const MobileReportsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates new MobileReport item
     * @param {MobileReport} body The definition of the new MobileReport item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMobileReport(body: MobileReport, options?: any) {
      return MobileReportsApiFp(configuration).addMobileReport(body, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMobileReportComment(Id: string, Comment: Comment, options?: any) {
      return MobileReportsApiFp(configuration).addMobileReportComment(
        Id,
        Comment,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Delete the specified MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMobileReport(Id: string, options?: any) {
      return MobileReportsApiFp(configuration).deleteMobileReport(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMobileReportComment(Id: string, CommentId: string, options?: any) {
      return MobileReportsApiFp(configuration).deleteMobileReportComment(
        Id,
        CommentId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Fetch MobileReport item by Id or path property.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReport(Id: string, options?: any) {
      return MobileReportsApiFp(configuration).getMobileReport(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportAllowedActions(Id: string, options?: any) {
      return MobileReportsApiFp(configuration).getMobileReportAllowedActions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the Comments for a MobileReport specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportComments(Id: string, options?: any) {
      return MobileReportsApiFp(configuration).getMobileReportComments(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the content of the specified MobileReport CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportContent(Id: string, options?: any) {
      return MobileReportsApiFp(configuration).getMobileReportContent(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets ItemPolicies associated with the MobileReport catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportPolicies(Id: string, options?: any) {
      return MobileReportsApiFp(configuration).getMobileReportPolicies(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets MobileReport Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReportProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ) {
      return MobileReportsApiFp(configuration).getMobileReportProperties(
        Id,
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Retrieve array of MobileReport catalog items.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMobileReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      options?: any
    ) {
      return MobileReportsApiFp(configuration).getMobileReports(
        top,
        skip,
        filter,
        count,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Sets ItemPolicies on the MobileReport item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} MobileReports Array of ItemPolicies to set on the MobileReport CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setMobileReportPolicies(
      Id: string,
      MobileReports: Array<ItemPolicy>,
      options?: any
    ) {
      return MobileReportsApiFp(configuration).setMobileReportPolicies(
        Id,
        MobileReports,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified MobileReport CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {MobileReport} body Definition of the MobileReport item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReport(Id: string, body: MobileReport, options?: any) {
      return MobileReportsApiFp(configuration).updateMobileReport(
        Id,
        body,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated MobileReport.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options?: any
    ) {
      return MobileReportsApiFp(configuration).updateMobileReportComment(
        Id,
        CommentId,
        Comment,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the MobileReport properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMobileReportProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return MobileReportsApiFp(configuration).updateMobileReportProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * MobileReportsApi - object-oriented interface
 * @export
 * @class MobileReportsApi
 * @extends {BaseAPI}
 */
export class MobileReportsApi extends BaseAPI {
  /**
   *
   * @summary Creates new MobileReport item
   * @param {MobileReport} body The definition of the new MobileReport item.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public addMobileReport(body: MobileReport, options?: any) {
    return MobileReportsApiFp(this.configuration).addMobileReport(
      body,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Creates a new Comment associated to the specified MobileReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Comment} Comment The Comment to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public addMobileReportComment(Id: string, Comment: Comment, options?: any) {
    return MobileReportsApiFp(this.configuration).addMobileReportComment(
      Id,
      Comment,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Delete the specified MobileReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public deleteMobileReport(Id: string, options?: any) {
    return MobileReportsApiFp(this.configuration).deleteMobileReport(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified Comment associated to the MobileReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} CommentId The Id of the Comment.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public deleteMobileReportComment(
    Id: string,
    CommentId: string,
    options?: any
  ) {
    return MobileReportsApiFp(this.configuration).deleteMobileReportComment(
      Id,
      CommentId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Fetch MobileReport item by Id or path property.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReport(Id: string, options?: any) {
    return MobileReportsApiFp(this.configuration).getMobileReport(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReportAllowedActions(Id: string, options?: any) {
    return MobileReportsApiFp(this.configuration).getMobileReportAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the Comments for a MobileReport specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReportComments(Id: string, options?: any) {
    return MobileReportsApiFp(this.configuration).getMobileReportComments(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the content of the specified MobileReport CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReportContent(Id: string, options?: any) {
    return MobileReportsApiFp(this.configuration).getMobileReportContent(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets ItemPolicies associated with the MobileReport catalog item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReportPolicies(Id: string, options?: any) {
    return MobileReportsApiFp(this.configuration).getMobileReportPolicies(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets MobileReport Properties (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReportProperties(
    Id: string,
    properties?: Array<string>,
    options?: any
  ) {
    return MobileReportsApiFp(this.configuration).getMobileReportProperties(
      Id,
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Retrieve array of MobileReport catalog items.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public getMobileReports(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    options?: any
  ) {
    return MobileReportsApiFp(this.configuration).getMobileReports(
      top,
      skip,
      filter,
      count,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Sets ItemPolicies on the MobileReport item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} MobileReports Array of ItemPolicies to set on the MobileReport CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public setMobileReportPolicies(
    Id: string,
    MobileReports: Array<ItemPolicy>,
    options?: any
  ) {
    return MobileReportsApiFp(this.configuration).setMobileReportPolicies(
      Id,
      MobileReports,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified MobileReport CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {MobileReport} body Definition of the MobileReport item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public updateMobileReport(Id: string, body: MobileReport, options?: any) {
    return MobileReportsApiFp(this.configuration).updateMobileReport(
      Id,
      body,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Comment specified by CommentId in the associated MobileReport.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} CommentId The Id of the Comment.
   * @param {Comment} Comment The Comment to be updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public updateMobileReportComment(
    Id: string,
    CommentId: string,
    Comment: Comment,
    options?: any
  ) {
    return MobileReportsApiFp(this.configuration).updateMobileReportComment(
      Id,
      CommentId,
      Comment,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the MobileReport properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MobileReportsApi
   */
  public updateMobileReportProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return MobileReportsApiFp(this.configuration).updateMobileReportProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * ReportsApi - fetch parameter creator
 * @export
 */
export const ReportsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new Report CatalogItem.
     * @param {Report} Report The definition of the new Report CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReport(Report: Report, options: any = {}): FetchArgs {
      // verify required parameter 'Report' is not null or undefined
      if (Report === null || Report === undefined) {
        throw new RequiredError(
          "Report",
          "Required parameter Report was null or undefined when calling addReport."
        );
      }
      const localVarPath = `/Reports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Report" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Report || {})
        : Report || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReportComment(
      Id: string,
      Comment: Comment,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling addReportComment."
        );
      }
      // verify required parameter 'Comment' is not null or undefined
      if (Comment === null || Comment === undefined) {
        throw new RequiredError(
          "Comment",
          "Required parameter Comment was null or undefined when calling addReportComment."
        );
      }
      const localVarPath = `/Reports({Id})/Comments`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Comment" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Comment || {})
        : Comment || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates new HistorySnapshot
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReportHistorySnapshot(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling addReportHistorySnapshot."
        );
      }
      const localVarPath = `/Reports({Id})/HistorySnapshots`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks the status of the specified Reports DataSource connection.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceName The name of the DataSource to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkReportDataSourceConnection(
      Id: string,
      DataSourceName: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling checkReportDataSourceConnection."
        );
      }
      // verify required parameter 'DataSourceName' is not null or undefined
      if (DataSourceName === null || DataSourceName === undefined) {
        throw new RequiredError(
          "DataSourceName",
          "Required parameter DataSourceName was null or undefined when calling checkReportDataSourceConnection."
        );
      }
      const localVarPath = `/Reports({Id})/Model.CheckDataSourceConnection`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"string" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSourceName || {})
        : DataSourceName || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteReport."
        );
      }
      const localVarPath = `/Reports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportComment(
      Id: string,
      CommentId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteReportComment."
        );
      }
      // verify required parameter 'CommentId' is not null or undefined
      if (CommentId === null || CommentId === undefined) {
        throw new RequiredError(
          "CommentId",
          "Required parameter CommentId was null or undefined when calling deleteReportComment."
        );
      }
      const localVarPath = `/Reports({Id})/Comments({CommentId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"CommentId"}}`, encodeURIComponent(String(CommentId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the requested Reports HistorySnapshot specified by HistoryId.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The ID property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteReportHistorySnapshot."
        );
      }
      // verify required parameter 'HistoryId' is not null or undefined
      if (HistoryId === null || HistoryId === undefined) {
        throw new RequiredError(
          "HistoryId",
          "Required parameter HistoryId was null or undefined when calling deleteReportHistorySnapshot."
        );
      }
      const localVarPath = `/Reports({Id})/HistorySnapshots({HistoryId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"HistoryId"}}`, encodeURIComponent(String(HistoryId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a Report CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReport."
        );
      }
      const localVarPath = `/Reports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportAllowedActions."
        );
      }
      const localVarPath = `/Reports({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of CacheOptions for the Report specified by the Id
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportCacheOptions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportCacheOptions."
        );
      }
      const localVarPath = `/Reports({Id})/CacheOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for the Report specified by the Id
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportCacheRefreshPlans(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportCacheRefreshPlans."
        );
      }
      const localVarPath = `/Reports({Id})/CacheRefreshPlans`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Comments for a Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportComments(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportComments."
        );
      }
      const localVarPath = `/Reports({Id})/Comments`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of the specified Report CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportContent(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportContent."
        );
      }
      const localVarPath = `/Reports({Id})/Content/$value`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the DataSources associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDataSources(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportDataSources."
        );
      }
      const localVarPath = `/Reports({Id})/DataSources`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDependentItems(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportDependentItems."
        );
      }
      const localVarPath = `/Reports({Id})/DependentItems`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the requested Reports HistorySnapshot specified by HistoryId.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The ID property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportHistorySnapshot."
        );
      }
      // verify required parameter 'HistoryId' is not null or undefined
      if (HistoryId === null || HistoryId === undefined) {
        throw new RequiredError(
          "HistoryId",
          "Required parameter HistoryId was null or undefined when calling getReportHistorySnapshot."
        );
      }
      const localVarPath = `/Reports({Id})/HistorySnapshots({HistoryId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"HistoryId"}}`, encodeURIComponent(String(HistoryId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the HistorySnapshotOptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshotOptions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportHistorySnapshotOptions."
        );
      }
      const localVarPath = `/Reports({Id})/HistorySnapshotOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a list of HistorySnapshots for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshots(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportHistorySnapshots."
        );
      }
      const localVarPath = `/Reports({Id})/HistorySnapshots`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportParameterDefinitions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportParameterDefinitions."
        );
      }
      const localVarPath = `/Reports({Id})/ParameterDefinitions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets policies associated with the specified Report CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportPolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportPolicies."
        );
      }
      const localVarPath = `/Reports({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the specified Reports Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportProperties(
      Id: string,
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportProperties."
        );
      }
      const localVarPath = `/Reports({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the shared DataSets for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSharedDataSets(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportSharedDataSets."
        );
      }
      const localVarPath = `/Reports({Id})/SharedDataSets`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Subscriptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSubscriptions(
      Id: string,
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getReportSubscriptions."
        );
      }
      const localVarPath = `/Reports({Id})/Subscriptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (expand !== undefined) {
        localVarQueryParameter["$expand"] = expand;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of Report CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/Reports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces the CacheOptions content for a given Report using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOptions content associated with the given Report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setReportCacheOptions."
        );
      }
      // verify required parameter 'CacheOptions' is not null or undefined
      if (CacheOptions === null || CacheOptions === undefined) {
        throw new RequiredError(
          "CacheOptions",
          "Required parameter CacheOptions was null or undefined when calling setReportCacheOptions."
        );
      }
      const localVarPath = `/Reports({Id})/CacheOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CacheOptions" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(CacheOptions || {})
        : CacheOptions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSource definition associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the Report specified by the Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportDataSource(
      Id: string,
      DataSource: DataSource,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setReportDataSource."
        );
      }
      // verify required parameter 'DataSource' is not null or undefined
      if (DataSource === null || DataSource === undefined) {
        throw new RequiredError(
          "DataSource",
          "Required parameter DataSource was null or undefined when calling setReportDataSource."
        );
      }
      const localVarPath = `/Reports({Id})/DataSources`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"DataSource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSource || {})
        : DataSource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates HistorySnapshotOptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportHistorySnapshotOptions(
      Id: string,
      HistorySnapshotOptions: HistorySnapshotOptions,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setReportHistorySnapshotOptions."
        );
      }
      // verify required parameter 'HistorySnapshotOptions' is not null or undefined
      if (
        HistorySnapshotOptions === null ||
        HistorySnapshotOptions === undefined
      ) {
        throw new RequiredError(
          "HistorySnapshotOptions",
          "Required parameter HistorySnapshotOptions was null or undefined when calling setReportHistorySnapshotOptions."
        );
      }
      const localVarPath = `/Reports({Id})/HistorySnapshotOptions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"HistorySnapshotOptions" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(HistorySnapshotOptions || {})
        : HistorySnapshotOptions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportPolicies(
      Id: string,
      ItemPolicies: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setReportPolicies."
        );
      }
      // verify required parameter 'ItemPolicies' is not null or undefined
      if (ItemPolicies === null || ItemPolicies === undefined) {
        throw new RequiredError(
          "ItemPolicies",
          "Required parameter ItemPolicies was null or undefined when calling setReportPolicies."
        );
      }
      const localVarPath = `/Reports({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ItemPolicies || {})
        : ItemPolicies || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the DataSet definitions associated with the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<DataSet>} DataSets Updated DataSet definitions for the specified Report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportSharedDataSets(
      Id: string,
      DataSets: Array<DataSet>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setReportSharedDataSets."
        );
      }
      // verify required parameter 'DataSets' is not null or undefined
      if (DataSets === null || DataSets === undefined) {
        throw new RequiredError(
          "DataSets",
          "Required parameter DataSets was null or undefined when calling setReportSharedDataSets."
        );
      }
      const localVarPath = `/Reports({Id})/SharedDataSets`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;DataSet&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(DataSets || {})
        : DataSets || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the execution cache snapshot for the specified report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCacheSnapshot(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateCacheSnapshot."
        );
      }
      const localVarPath = `/Reports({Id})/Model.UpdateCacheSnapshot`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified Report CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Report} Report Definition of the Report item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(Id: string, Report: Report, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateReport."
        );
      }
      // verify required parameter 'Report' is not null or undefined
      if (Report === null || Report === undefined) {
        throw new RequiredError(
          "Report",
          "Required parameter Report was null or undefined when calling updateReport."
        );
      }
      const localVarPath = `/Reports({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Report" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Report || {})
        : Report || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateReportComment."
        );
      }
      // verify required parameter 'CommentId' is not null or undefined
      if (CommentId === null || CommentId === undefined) {
        throw new RequiredError(
          "CommentId",
          "Required parameter CommentId was null or undefined when calling updateReportComment."
        );
      }
      // verify required parameter 'Comment' is not null or undefined
      if (Comment === null || Comment === undefined) {
        throw new RequiredError(
          "Comment",
          "Required parameter Comment was null or undefined when calling updateReportComment."
        );
      }
      const localVarPath = `/Reports({Id})/Comments({CommentId})`
        .replace(`{${"Id"}}`, encodeURIComponent(String(Id)))
        .replace(`{${"CommentId"}}`, encodeURIComponent(String(CommentId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Comment" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Comment || {})
        : Comment || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the Report specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the Report, represented as ParameterDefinitionsPatch object. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateReportParameterDefinitions."
        );
      }
      // verify required parameter 'ParameterDefinitions' is not null or undefined
      if (ParameterDefinitions === null || ParameterDefinitions === undefined) {
        throw new RequiredError(
          "ParameterDefinitions",
          "Required parameter ParameterDefinitions was null or undefined when calling updateReportParameterDefinitions."
        );
      }
      const localVarPath = `/Reports({Id})/ParameterDefinitions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ReportParameterDefinitionPatch&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(ParameterDefinitions || {})
        : ParameterDefinitions || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Report Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateReportProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateReportProperties."
        );
      }
      const localVarPath = `/Reports({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new Report CatalogItem.
     * @param {Report} Report The definition of the new Report CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReport(
      Report: Report,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Report> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).addReport(Report, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReportComment(
      Id: string,
      Comment: Comment,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).addReportComment(Id, Comment, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Creates new HistorySnapshot
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReportHistorySnapshot(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).addReportHistorySnapshot(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Checks the status of the specified Reports DataSource connection.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceName The name of the DataSource to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkReportDataSourceConnection(
      Id: string,
      DataSourceName: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<DataSourceCheckResult> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).checkReportDataSourceConnection(Id, DataSourceName, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).deleteReport(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportComment(
      Id: string,
      CommentId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).deleteReportComment(Id, CommentId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the requested Reports HistorySnapshot specified by HistoryId.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The ID property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).deleteReportHistorySnapshot(Id, HistoryId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a Report CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Report> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReport(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of CacheOptions for the Report specified by the Id
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportCacheOptions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<CacheOptions> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportCacheOptions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for the Report specified by the Id
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportCacheRefreshPlans(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<ODataCacheRefreshPlans> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportCacheRefreshPlans(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the Comments for a Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportComments(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataComments> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportComments(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of the specified Report CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportContent(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportContent(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the DataSources associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDataSources(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDataSources> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportDataSources(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDependentItems(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataDependentItems> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportDependentItems(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the requested Reports HistorySnapshot specified by HistoryId.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The ID property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshot(
      Id: string,
      HistoryId: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<HistorySnapshot> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportHistorySnapshot(Id, HistoryId, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the HistorySnapshotOptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshotOptions(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<HistorySnapshotOptions> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportHistorySnapshotOptions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Get a list of HistorySnapshots for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshots(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<Array<HistorySnapshot>> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportHistorySnapshots(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportParameterDefinitions(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<ODataReportParameterDefinitions> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportParameterDefinitions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets policies associated with the specified Report CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportPolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportPolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the specified Reports Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportProperties(
      Id: string,
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportProperties(Id, properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the shared DataSets for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSharedDataSets(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DataSet>> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportSharedDataSets(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the Subscriptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSubscriptions(
      Id: string,
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Subscription>> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportSubscriptions(
        Id,
        top,
        skip,
        filter,
        count,
        orderBy,
        expand,
        select,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of Report CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataReports> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReports(top, skip, filter, count, orderBy, select, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces the CacheOptions content for a given Report using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOptions content associated with the given Report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).setReportCacheOptions(Id, CacheOptions, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSource definition associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the Report specified by the Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportDataSource(
      Id: string,
      DataSource: DataSource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).setReportDataSource(Id, DataSource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates HistorySnapshotOptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportHistorySnapshotOptions(
      Id: string,
      HistorySnapshotOptions: HistorySnapshotOptions,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).setReportHistorySnapshotOptions(Id, HistorySnapshotOptions, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportPolicies(
      Id: string,
      ItemPolicies: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).setReportPolicies(Id, ItemPolicies, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the DataSet definitions associated with the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<DataSet>} DataSets Updated DataSet definitions for the specified Report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportSharedDataSets(
      Id: string,
      DataSets: Array<DataSet>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).setReportSharedDataSets(Id, DataSets, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the execution cache snapshot for the specified report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCacheSnapshot(
      Id: string,
      options?: any
    ): (
        fetch?: FetchAPI,
        basePath?: string
      ) => Promise<UpdateCacheSnapshotResult> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).updateCacheSnapshot(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified Report CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Report} Report Definition of the Report item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      Id: string,
      Report: Report,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).updateReport(Id, Report, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).updateReportComment(Id, CommentId, Comment, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the Report specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the Report, represented as ParameterDefinitionsPatch object. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).updateReportParameterDefinitions(Id, ParameterDefinitions, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Report Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).updateReportProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new Report CatalogItem.
     * @param {Report} Report The definition of the new Report CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReport(Report: Report, options?: any) {
      return ReportsApiFp(configuration).addReport(Report, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Creates a new Comment associated to the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Comment} Comment The Comment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReportComment(Id: string, Comment: Comment, options?: any) {
      return ReportsApiFp(configuration).addReportComment(
        Id,
        Comment,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Creates new HistorySnapshot
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addReportHistorySnapshot(Id: string, options?: any) {
      return ReportsApiFp(configuration).addReportHistorySnapshot(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Checks the status of the specified Reports DataSource connection.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} DataSourceName The name of the DataSource to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkReportDataSourceConnection(
      Id: string,
      DataSourceName: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).checkReportDataSourceConnection(
        Id,
        DataSourceName,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(Id: string, options?: any) {
      return ReportsApiFp(configuration).deleteReport(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Deletes the specified Comment associated to the Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportComment(Id: string, CommentId: string, options?: any) {
      return ReportsApiFp(configuration).deleteReportComment(
        Id,
        CommentId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the requested Reports HistorySnapshot specified by HistoryId.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The ID property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportHistorySnapshot(Id: string, HistoryId: string, options?: any) {
      return ReportsApiFp(configuration).deleteReportHistorySnapshot(
        Id,
        HistoryId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets a Report CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReport(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportAllowedActions(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportAllowedActions(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the content of CacheOptions for the Report specified by the Id
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportCacheOptions(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportCacheOptions(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the CacheRefreshPlans for the Report specified by the Id
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportCacheRefreshPlans(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportCacheRefreshPlans(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the Comments for a Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportComments(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportComments(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the content of the specified Report CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportContent(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportContent(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the DataSources associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDataSources(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportDataSources(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Returns a list of CatalogItems that reference the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDependentItems(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportDependentItems(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the requested Reports HistorySnapshot specified by HistoryId.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} HistoryId The ID property of the HistorySnapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshot(Id: string, HistoryId: string, options?: any) {
      return ReportsApiFp(configuration).getReportHistorySnapshot(
        Id,
        HistoryId,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the HistorySnapshotOptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshotOptions(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportHistorySnapshotOptions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Get a list of HistorySnapshots for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportHistorySnapshots(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportHistorySnapshots(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the ParameterDefinitions associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportParameterDefinitions(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportParameterDefinitions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets policies associated with the specified Report CatalogItem.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportPolicies(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportPolicies(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the specified Reports Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportProperties(Id: string, properties?: Array<string>, options?: any) {
      return ReportsApiFp(configuration).getReportProperties(
        Id,
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the shared DataSets for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSharedDataSets(Id: string, options?: any) {
      return ReportsApiFp(configuration).getReportSharedDataSets(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the Subscriptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSubscriptions(
      Id: string,
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).getReportSubscriptions(
        Id,
        top,
        skip,
        filter,
        count,
        orderBy,
        expand,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets an array of Report CatalogItems.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      select?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).getReports(
        top,
        skip,
        filter,
        count,
        orderBy,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces the CacheOptions content for a given Report using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {CacheOptions} CacheOptions Updated definition for the CacheOptions content associated with the given Report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportCacheOptions(
      Id: string,
      CacheOptions: CacheOptions,
      options?: any
    ) {
      return ReportsApiFp(configuration).setReportCacheOptions(
        Id,
        CacheOptions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSource definition associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {DataSource} DataSource Updated definition for the DataSource associated with the Report specified by the Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportDataSource(Id: string, DataSource: DataSource, options?: any) {
      return ReportsApiFp(configuration).setReportDataSource(
        Id,
        DataSource,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates HistorySnapshotOptions for the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportHistorySnapshotOptions(
      Id: string,
      HistorySnapshotOptions: HistorySnapshotOptions,
      options?: any
    ) {
      return ReportsApiFp(configuration).setReportHistorySnapshotOptions(
        Id,
        HistorySnapshotOptions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies associated with the Report specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportPolicies(
      Id: string,
      ItemPolicies: Array<ItemPolicy>,
      options?: any
    ) {
      return ReportsApiFp(configuration).setReportPolicies(
        Id,
        ItemPolicies,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the DataSet definitions associated with the specified Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<DataSet>} DataSets Updated DataSet definitions for the specified Report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setReportSharedDataSets(
      Id: string,
      DataSets: Array<DataSet>,
      options?: any
    ) {
      return ReportsApiFp(configuration).setReportSharedDataSets(
        Id,
        DataSets,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the execution cache snapshot for the specified report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCacheSnapshot(Id: string, options?: any) {
      return ReportsApiFp(configuration).updateCacheSnapshot(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Updates the specified Report CatalogItem using the provided definition.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Report} Report Definition of the Report item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(Id: string, Report: Report, options?: any) {
      return ReportsApiFp(configuration).updateReport(
        Id,
        Report,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Comment specified by CommentId in the associated Report.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {string} CommentId The Id of the Comment.
     * @param {Comment} Comment The Comment to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportComment(
      Id: string,
      CommentId: string,
      Comment: Comment,
      options?: any
    ) {
      return ReportsApiFp(configuration).updateReportComment(
        Id,
        CommentId,
        Comment,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the ParameterDefinitions associated with the Report specified by Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the Report, represented as ParameterDefinitionsPatch object. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportParameterDefinitions(
      Id: string,
      ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
      options?: any
    ) {
      return ReportsApiFp(configuration).updateReportParameterDefinitions(
        Id,
        ParameterDefinitions,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Report Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReportProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return ReportsApiFp(configuration).updateReportProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
  /**
   *
   * @summary Creates a new Report CatalogItem.
   * @param {Report} Report The definition of the new Report CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public addReport(Report: Report, options?: any) {
    return ReportsApiFp(this.configuration).addReport(Report, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Creates a new Comment associated to the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Comment} Comment The Comment to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public addReportComment(Id: string, Comment: Comment, options?: any) {
    return ReportsApiFp(this.configuration).addReportComment(
      Id,
      Comment,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Creates new HistorySnapshot
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public addReportHistorySnapshot(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).addReportHistorySnapshot(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Checks the status of the specified Reports DataSource connection.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} DataSourceName The name of the DataSource to check.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public checkReportDataSourceConnection(
    Id: string,
    DataSourceName: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).checkReportDataSourceConnection(
      Id,
      DataSourceName,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReport(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).deleteReport(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Deletes the specified Comment associated to the Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} CommentId The Id of the Comment.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReportComment(Id: string, CommentId: string, options?: any) {
    return ReportsApiFp(this.configuration).deleteReportComment(
      Id,
      CommentId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the requested Reports HistorySnapshot specified by HistoryId.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} HistoryId The ID property of the HistorySnapshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReportHistorySnapshot(
    Id: string,
    HistoryId: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).deleteReportHistorySnapshot(
      Id,
      HistoryId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets a Report CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReport(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReport(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportAllowedActions(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the content of CacheOptions for the Report specified by the Id
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportCacheOptions(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportCacheOptions(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the CacheRefreshPlans for the Report specified by the Id
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportCacheRefreshPlans(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportCacheRefreshPlans(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the Comments for a Report specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportComments(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportComments(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the content of the specified Report CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportContent(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportContent(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the DataSources associated with the Report specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportDataSources(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportDataSources(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Returns a list of CatalogItems that reference the Report specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportDependentItems(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportDependentItems(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the requested Reports HistorySnapshot specified by HistoryId.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} HistoryId The ID property of the HistorySnapshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportHistorySnapshot(
    Id: string,
    HistoryId: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getReportHistorySnapshot(
      Id,
      HistoryId,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the HistorySnapshotOptions for the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportHistorySnapshotOptions(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportHistorySnapshotOptions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Get a list of HistorySnapshots for the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportHistorySnapshots(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportHistorySnapshots(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the ParameterDefinitions associated with the Report specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportParameterDefinitions(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportParameterDefinitions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets policies associated with the specified Report CatalogItem.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportPolicies(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportPolicies(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the specified Reports Properties (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportProperties(
    Id: string,
    properties?: Array<string>,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getReportProperties(
      Id,
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the shared DataSets for the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportSharedDataSets(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).getReportSharedDataSets(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the Subscriptions for the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportSubscriptions(
    Id: string,
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    expand?: string,
    select?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getReportSubscriptions(
      Id,
      top,
      skip,
      filter,
      count,
      orderBy,
      expand,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of Report CatalogItems.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReports(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    select?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getReports(
      top,
      skip,
      filter,
      count,
      orderBy,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces the CacheOptions content for a given Report using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {CacheOptions} CacheOptions Updated definition for the CacheOptions content associated with the given Report.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public setReportCacheOptions(
    Id: string,
    CacheOptions: CacheOptions,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).setReportCacheOptions(
      Id,
      CacheOptions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSource definition associated with the Report specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {DataSource} DataSource Updated definition for the DataSource associated with the Report specified by the Id.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public setReportDataSource(
    Id: string,
    DataSource: DataSource,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).setReportDataSource(
      Id,
      DataSource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates HistorySnapshotOptions for the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {HistorySnapshotOptions} HistorySnapshotOptions Modified HistorySnapshotOptions object.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public setReportHistorySnapshotOptions(
    Id: string,
    HistorySnapshotOptions: HistorySnapshotOptions,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).setReportHistorySnapshotOptions(
      Id,
      HistorySnapshotOptions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies associated with the Report specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} ItemPolicies The ItemPolicy definitions that will be replaced.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public setReportPolicies(
    Id: string,
    ItemPolicies: Array<ItemPolicy>,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).setReportPolicies(
      Id,
      ItemPolicies,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the DataSet definitions associated with the specified Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<DataSet>} DataSets Updated DataSet definitions for the specified Report.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public setReportSharedDataSets(
    Id: string,
    DataSets: Array<DataSet>,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).setReportSharedDataSets(
      Id,
      DataSets,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the execution cache snapshot for the specified report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateCacheSnapshot(Id: string, options?: any) {
    return ReportsApiFp(this.configuration).updateCacheSnapshot(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Updates the specified Report CatalogItem using the provided definition.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Report} Report Definition of the Report item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateReport(Id: string, Report: Report, options?: any) {
    return ReportsApiFp(this.configuration).updateReport(
      Id,
      Report,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Comment specified by CommentId in the associated Report.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {string} CommentId The Id of the Comment.
   * @param {Comment} Comment The Comment to be updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateReportComment(
    Id: string,
    CommentId: string,
    Comment: Comment,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).updateReportComment(
      Id,
      CommentId,
      Comment,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the ParameterDefinitions associated with the Report specified by Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ReportParameterDefinitionPatch>} ParameterDefinitions Updated definitions for the ParameterDefinitions associated with the Report, represented as ParameterDefinitionsPatch object. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateReportParameterDefinitions(
    Id: string,
    ParameterDefinitions: Array<ReportParameterDefinitionPatch>,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).updateReportParameterDefinitions(
      Id,
      ParameterDefinitions,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Report Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateReportProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).updateReportProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * ResourcesApi - fetch parameter creator
 * @export
 */
export const ResourcesApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates new Resource item
     * @param {Resource} Resource The definition of the new Resource item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResource(Resource: Resource, options: any = {}): FetchArgs {
      // verify required parameter 'Resource' is not null or undefined
      if (Resource === null || Resource === undefined) {
        throw new RequiredError(
          "Resource",
          "Required parameter Resource was null or undefined when calling addResource."
        );
      }
      const localVarPath = `/Resources`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Resource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Resource || {})
        : Resource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the specified Resource catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResource(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteResource."
        );
      }
      const localVarPath = `/Resources({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the specified Resource.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResource(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getResource."
        );
      }
      const localVarPath = `/Resources({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAllowedActions(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getResourceAllowedActions."
        );
      }
      const localVarPath = `/Resources({Id})/AllowedActions`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the content of the specified Resource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceContent(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getResourceContent."
        );
      }
      const localVarPath = `/Resources({Id})/Content/$value`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets ItemPolicies on the Resource item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourcePolicies(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getResourcePolicies."
        );
      }
      const localVarPath = `/Resources({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the specified Resources Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceProperties(
      Id: string,
      Properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getResourceProperties."
        );
      }
      const localVarPath = `/Resources({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (Properties) {
        localVarQueryParameter["Properties"] = Properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of Resource catalog items
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResources(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/Resources`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies on the Resource item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} Policies Array of ItemPolicies to set on the Resource CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setResourcePolicies(
      Id: string,
      Policies: Array<ItemPolicy>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setResourcePolicies."
        );
      }
      // verify required parameter 'Policies' is not null or undefined
      if (Policies === null || Policies === undefined) {
        throw new RequiredError(
          "Policies",
          "Required parameter Policies was null or undefined when calling setResourcePolicies."
        );
      }
      const localVarPath = `/Resources({Id})/Policies`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;ItemPolicy&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Policies || {})
        : Policies || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the specified Resource catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Resource} Resource Definition of the Resource item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResource(
      Id: string,
      Resource: Resource,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateResource."
        );
      }
      // verify required parameter 'Resource' is not null or undefined
      if (Resource === null || Resource === undefined) {
        throw new RequiredError(
          "Resource",
          "Required parameter Resource was null or undefined when calling updateResource."
        );
      }
      const localVarPath = `/Resources({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Resource" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Resource || {})
        : Resource || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Resource Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceProperties(
      Id: string,
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateResourceProperties."
        );
      }
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateResourceProperties."
        );
      }
      const localVarPath = `/Resources({Id})/Properties`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates new Resource item
     * @param {Resource} Resource The definition of the new Resource item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResource(
      Resource: Resource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Resource> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).addResource(Resource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Delete the specified Resource catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResource(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).deleteResource(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Get the specified Resource.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResource(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Resource> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).getResource(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAllowedActions(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).getResourceAllowedActions(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the content of the specified Resource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceContent(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).getResourceContent(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets ItemPolicies on the Resource item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourcePolicies(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ItemPolicy>> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).getResourcePolicies(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the specified Resources Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceProperties(
      Id: string,
      Properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).getResourceProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of Resource catalog items
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResources(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataResources> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).getResources(top, skip, filter, count, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces ItemPolicies on the Resource item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} Policies Array of ItemPolicies to set on the Resource CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setResourcePolicies(
      Id: string,
      Policies: Array<ItemPolicy>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).setResourcePolicies(Id, Policies, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the specified Resource catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Resource} Resource Definition of the Resource item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResource(
      Id: string,
      Resource: Resource,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Resource> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).updateResource(Id, Resource, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Resource Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ResourcesApiFetchParamCreator(
        configuration
      ).updateResourceProperties(Id, Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates new Resource item
     * @param {Resource} Resource The definition of the new Resource item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResource(Resource: Resource, options?: any) {
      return ResourcesApiFp(configuration).addResource(Resource, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Delete the specified Resource catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResource(Id: string, options?: any) {
      return ResourcesApiFp(configuration).deleteResource(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Get the specified Resource.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResource(Id: string, options?: any) {
      return ResourcesApiFp(configuration).getResource(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAllowedActions(Id: string, options?: any) {
      return ResourcesApiFp(configuration).getResourceAllowedActions(
        Id,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets the content of the specified Resource CatalogItem specified by the Id.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceContent(Id: string, options?: any) {
      return ResourcesApiFp(configuration).getResourceContent(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets ItemPolicies on the Resource item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourcePolicies(Id: string, options?: any) {
      return ResourcesApiFp(configuration).getResourcePolicies(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the specified Resources Properties (takes list of Property names to retrieve the values)
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<string>} [Properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceProperties(
      Id: string,
      Properties?: Array<string>,
      options?: any
    ) {
      return ResourcesApiFp(configuration).getResourceProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Gets an array of Resource catalog items
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResources(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      options?: any
    ) {
      return ResourcesApiFp(configuration).getResources(
        top,
        skip,
        filter,
        count,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces ItemPolicies on the Resource item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<ItemPolicy>} Policies Array of ItemPolicies to set on the Resource CatalogItem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setResourcePolicies(
      Id: string,
      Policies: Array<ItemPolicy>,
      options?: any
    ) {
      return ResourcesApiFp(configuration).setResourcePolicies(
        Id,
        Policies,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the specified Resource catalog item.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Resource} Resource Definition of the Resource item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResource(Id: string, Resource: Resource, options?: any) {
      return ResourcesApiFp(configuration).updateResource(
        Id,
        Resource,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Resource Properties included in the given list.
     * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array<Property>} Properties The Properties that will be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceProperties(
      Id: string,
      Properties: Array<Property>,
      options?: any
    ) {
      return ResourcesApiFp(configuration).updateResourceProperties(
        Id,
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI {
  /**
   *
   * @summary Creates new Resource item
   * @param {Resource} Resource The definition of the new Resource item.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public addResource(Resource: Resource, options?: any) {
    return ResourcesApiFp(this.configuration).addResource(Resource, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Delete the specified Resource catalog item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public deleteResource(Id: string, options?: any) {
    return ResourcesApiFp(this.configuration).deleteResource(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Get the specified Resource.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public getResource(Id: string, options?: any) {
    return ResourcesApiFp(this.configuration).getResource(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public getResourceAllowedActions(Id: string, options?: any) {
    return ResourcesApiFp(this.configuration).getResourceAllowedActions(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets the content of the specified Resource CatalogItem specified by the Id.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public getResourceContent(Id: string, options?: any) {
    return ResourcesApiFp(this.configuration).getResourceContent(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets ItemPolicies on the Resource item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public getResourcePolicies(Id: string, options?: any) {
    return ResourcesApiFp(this.configuration).getResourcePolicies(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the specified Resources Properties (takes list of Property names to retrieve the values)
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<string>} [Properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public getResourceProperties(
    Id: string,
    Properties?: Array<string>,
    options?: any
  ) {
    return ResourcesApiFp(this.configuration).getResourceProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Gets an array of Resource catalog items
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public getResources(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    options?: any
  ) {
    return ResourcesApiFp(this.configuration).getResources(
      top,
      skip,
      filter,
      count,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces ItemPolicies on the Resource item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<ItemPolicy>} Policies Array of ItemPolicies to set on the Resource CatalogItem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public setResourcePolicies(
    Id: string,
    Policies: Array<ItemPolicy>,
    options?: any
  ) {
    return ResourcesApiFp(this.configuration).setResourcePolicies(
      Id,
      Policies,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the specified Resource catalog item.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Resource} Resource Definition of the Resource item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public updateResource(Id: string, Resource: Resource, options?: any) {
    return ResourcesApiFp(this.configuration).updateResource(
      Id,
      Resource,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Resource Properties included in the given list.
   * @param {string} Id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.
   * @param {Array<Property>} Properties The Properties that will be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public updateResourceProperties(
    Id: string,
    Properties: Array<Property>,
    options?: any
  ) {
    return ResourcesApiFp(this.configuration).updateResourceProperties(
      Id,
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * SessionApi - fetch parameter creator
 * @export
 */
export const SessionApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates a new session
     * @param {UserCredentials} UserCredentials The credentials of the user to logon as
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(
      UserCredentials: UserCredentials,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'UserCredentials' is not null or undefined
      if (UserCredentials === null || UserCredentials === undefined) {
        throw new RequiredError(
          "UserCredentials",
          "Required parameter UserCredentials was null or undefined when calling createSession."
        );
      }
      const localVarPath = `/Session`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"UserCredentials" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(UserCredentials || {})
        : UserCredentials || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the currently active session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(options: any = {}): FetchArgs {
      const localVarPath = `/Session`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates a new session
     * @param {UserCredentials} UserCredentials The credentials of the user to logon as
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(
      UserCredentials: UserCredentials,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SessionApiFetchParamCreator(
        configuration
      ).createSession(UserCredentials, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the currently active session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SessionApiFetchParamCreator(
        configuration
      ).deleteSession(options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates a new session
     * @param {UserCredentials} UserCredentials The credentials of the user to logon as
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(UserCredentials: UserCredentials, options?: any) {
      return SessionApiFp(configuration).createSession(
        UserCredentials,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the currently active session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(options?: any) {
      return SessionApiFp(configuration).deleteSession(options)(
        fetch,
        basePath
      );
    },
  };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
  /**
   *
   * @summary Creates a new session
   * @param {UserCredentials} UserCredentials The credentials of the user to logon as
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionApi
   */
  public createSession(UserCredentials: UserCredentials, options?: any) {
    return SessionApiFp(this.configuration).createSession(
      UserCredentials,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the currently active session
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionApi
   */
  public deleteSession(options?: any) {
    return SessionApiFp(this.configuration).deleteSession(options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * SubscriptionsApi - fetch parameter creator
 * @export
 */
export const SubscriptionsApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Creates new Subscription item
     * @param {Subscription} Subscription The definition of the new Subscription item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscription(Subscription: Subscription, options: any = {}): FetchArgs {
      // verify required parameter 'Subscription' is not null or undefined
      if (Subscription === null || Subscription === undefined) {
        throw new RequiredError(
          "Subscription",
          "Required parameter Subscription was null or undefined when calling addSubscription."
        );
      }
      const localVarPath = `/Subscriptions`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Subscription" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Subscription || {})
        : Subscription || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the specified Subscription.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscription(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling deleteSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Disables the Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableSubscription(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling disableSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})/Model.Disable`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Enables a Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableSubscription(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling enableSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})/Model.Enable`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Executes the Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSubscription(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling executeSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})/Model.Execute`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the specified Subscription.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscription(Id: string, options: any = {}): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling getSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets an array of Subscriptions.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptions(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/Subscriptions`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (filter !== undefined) {
        localVarQueryParameter["$filter"] = filter;
      }

      if (count !== undefined) {
        localVarQueryParameter["$count"] = count;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["$orderBy"] = orderBy;
      }

      if (expand !== undefined) {
        localVarQueryParameter["$expand"] = expand;
      }

      if (select !== undefined) {
        localVarQueryParameter["$select"] = select;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replaces the Subscription item using Id property as key.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {Subscription} Subscription Subscription item to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSubscription(
      Id: string,
      Subscription: Subscription,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling setSubscription."
        );
      }
      // verify required parameter 'Subscription' is not null or undefined
      if (Subscription === null || Subscription === undefined) {
        throw new RequiredError(
          "Subscription",
          "Required parameter Subscription was null or undefined when calling setSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Subscription" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Subscription || {})
        : Subscription || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the Subscription item using Id property as key.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {Subscription} Subscription Definition of the Subscription that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(
      Id: string,
      Subscription: Subscription,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Id' is not null or undefined
      if (Id === null || Id === undefined) {
        throw new RequiredError(
          "Id",
          "Required parameter Id was null or undefined when calling updateSubscription."
        );
      }
      // verify required parameter 'Subscription' is not null or undefined
      if (Subscription === null || Subscription === undefined) {
        throw new RequiredError(
          "Subscription",
          "Required parameter Subscription was null or undefined when calling updateSubscription."
        );
      }
      const localVarPath = `/Subscriptions({Id})`.replace(
        `{${"Id"}}`,
        encodeURIComponent(String(Id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Subscription" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Subscription || {})
        : Subscription || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Creates new Subscription item
     * @param {Subscription} Subscription The definition of the new Subscription item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscription(
      Subscription: Subscription,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Subscription> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).addSubscription(Subscription, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes the specified Subscription.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscription(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).deleteSubscription(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Disables the Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableSubscription(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).disableSubscription(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Enables a Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableSubscription(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).enableSubscription(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Executes the Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSubscription(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).executeSubscription(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Get the specified Subscription.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscription(
      Id: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Subscription> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).getSubscription(Id, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets an array of Subscriptions.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptions(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Subscription>> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).getSubscriptions(
        top,
        skip,
        filter,
        count,
        orderBy,
        expand,
        select,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Replaces the Subscription item using Id property as key.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {Subscription} Subscription Subscription item to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSubscription(
      Id: string,
      Subscription: Subscription,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).setSubscription(Id, Subscription, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the Subscription item using Id property as key.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {Subscription} Subscription Definition of the Subscription that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(
      Id: string,
      Subscription: Subscription,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SubscriptionsApiFetchParamCreator(
        configuration
      ).updateSubscription(Id, Subscription, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Creates new Subscription item
     * @param {Subscription} Subscription The definition of the new Subscription item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscription(Subscription: Subscription, options?: any) {
      return SubscriptionsApiFp(configuration).addSubscription(
        Subscription,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes the specified Subscription.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscription(Id: string, options?: any) {
      return SubscriptionsApiFp(configuration).deleteSubscription(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Disables the Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableSubscription(Id: string, options?: any) {
      return SubscriptionsApiFp(configuration).disableSubscription(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Enables a Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableSubscription(Id: string, options?: any) {
      return SubscriptionsApiFp(configuration).enableSubscription(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Executes the Subscription specified by the Id.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSubscription(Id: string, options?: any) {
      return SubscriptionsApiFp(configuration).executeSubscription(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Get the specified Subscription.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscription(Id: string, options?: any) {
      return SubscriptionsApiFp(configuration).getSubscription(Id, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets an array of Subscriptions.
     * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptions(
      top?: number,
      skip?: number,
      filter?: string,
      count?: string,
      orderBy?: string,
      expand?: string,
      select?: string,
      options?: any
    ) {
      return SubscriptionsApiFp(configuration).getSubscriptions(
        top,
        skip,
        filter,
        count,
        orderBy,
        expand,
        select,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Replaces the Subscription item using Id property as key.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {Subscription} Subscription Subscription item to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSubscription(Id: string, Subscription: Subscription, options?: any) {
      return SubscriptionsApiFp(configuration).setSubscription(
        Id,
        Subscription,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the Subscription item using Id property as key.
     * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {Subscription} Subscription Definition of the Subscription that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(Id: string, Subscription: Subscription, options?: any) {
      return SubscriptionsApiFp(configuration).updateSubscription(
        Id,
        Subscription,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
  /**
   *
   * @summary Creates new Subscription item
   * @param {Subscription} Subscription The definition of the new Subscription item.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public addSubscription(Subscription: Subscription, options?: any) {
    return SubscriptionsApiFp(this.configuration).addSubscription(
      Subscription,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes the specified Subscription.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public deleteSubscription(Id: string, options?: any) {
    return SubscriptionsApiFp(this.configuration).deleteSubscription(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Disables the Subscription specified by the Id.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public disableSubscription(Id: string, options?: any) {
    return SubscriptionsApiFp(this.configuration).disableSubscription(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Enables a Subscription specified by the Id.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public enableSubscription(Id: string, options?: any) {
    return SubscriptionsApiFp(this.configuration).enableSubscription(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Executes the Subscription specified by the Id.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public executeSubscription(Id: string, options?: any) {
    return SubscriptionsApiFp(this.configuration).executeSubscription(
      Id,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Get the specified Subscription.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public getSubscription(Id: string, options?: any) {
    return SubscriptionsApiFp(this.configuration).getSubscription(Id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets an array of Subscriptions.
   * @param {number} [top] Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
   * @param {number} [skip] Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
   * @param {string} [filter] Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
   * @param {string} [count] Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
   * @param {string} [orderBy] Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
   * @param {string} [expand] Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
   * @param {string} [select] Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public getSubscriptions(
    top?: number,
    skip?: number,
    filter?: string,
    count?: string,
    orderBy?: string,
    expand?: string,
    select?: string,
    options?: any
  ) {
    return SubscriptionsApiFp(this.configuration).getSubscriptions(
      top,
      skip,
      filter,
      count,
      orderBy,
      expand,
      select,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Replaces the Subscription item using Id property as key.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {Subscription} Subscription Subscription item to update.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public setSubscription(
    Id: string,
    Subscription: Subscription,
    options?: any
  ) {
    return SubscriptionsApiFp(this.configuration).setSubscription(
      Id,
      Subscription,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the Subscription item using Id property as key.
   * @param {string} Id The key (GUID) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef
   * @param {Subscription} Subscription Definition of the Subscription that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriptionsApi
   */
  public updateSubscription(
    Id: string,
    Subscription: Subscription,
    options?: any
  ) {
    return SubscriptionsApiFp(this.configuration).updateSubscription(
      Id,
      Subscription,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * SystemApi - fetch parameter creator
 * @export
 */
export const SystemApiFetchParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Gets a list of system level actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemAllowedActions(options: any = {}): FetchArgs {
      const localVarPath = `/System/AllowedActions`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get SystemInformation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemInfo(options: any = {}): FetchArgs {
      const localVarPath = `/System`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the System Policies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemPolicies(options: any = {}): FetchArgs {
      const localVarPath = `/System/Policies`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Systems Properties (takes list of Property names to retrieve the values)
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemProperties(
      properties?: Array<string>,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/System/Properties`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (properties) {
        localVarQueryParameter["properties"] = properties;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the System's Policies.
     * @param {SystemPolicy} SystemPolicy The SystemPolicy object that contains settings to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSystemPolicies(
      SystemPolicy: SystemPolicy,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'SystemPolicy' is not null or undefined
      if (SystemPolicy === null || SystemPolicy === undefined) {
        throw new RequiredError(
          "SystemPolicy",
          "Required parameter SystemPolicy was null or undefined when calling setSystemPolicies."
        );
      }
      const localVarPath = `/System/Policies`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"SystemPolicy" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(SystemPolicy || {})
        : SystemPolicy || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the System Properties with the given property list.
     * @param {Array<Property>} Properties Definition of the SystemProperties that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSystemProperties(
      Properties: Array<Property>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Properties' is not null or undefined
      if (Properties === null || Properties === undefined) {
        throw new RequiredError(
          "Properties",
          "Required parameter Properties was null or undefined when calling updateSystemProperties."
        );
      }
      const localVarPath = `/System/Properties`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"Array&lt;Property&gt;" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(Properties || {})
        : Properties || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Gets a list of system level actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemAllowedActions(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataAllowedActions> {
      const localVarFetchArgs = SystemApiFetchParamCreator(
        configuration
      ).getSystemAllowedActions(options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Get SystemInformation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemInfo(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<SystemInfo> {
      const localVarFetchArgs = SystemApiFetchParamCreator(
        configuration
      ).getSystemInfo(options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the System Policies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemPolicies(
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Policy>> {
      const localVarFetchArgs = SystemApiFetchParamCreator(
        configuration
      ).getSystemPolicies(options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Gets the Systems Properties (takes list of Property names to retrieve the values)
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemProperties(
      properties?: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataProperties> {
      const localVarFetchArgs = SystemApiFetchParamCreator(
        configuration
      ).getSystemProperties(properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the System's Policies.
     * @param {SystemPolicy} SystemPolicy The SystemPolicy object that contains settings to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSystemPolicies(
      SystemPolicy: SystemPolicy,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SystemApiFetchParamCreator(
        configuration
      ).setSystemPolicies(SystemPolicy, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Updates the System Properties with the given property list.
     * @param {Array<Property>} Properties Definition of the SystemProperties that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSystemProperties(
      Properties: Array<Property>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SystemApiFetchParamCreator(
        configuration
      ).updateSystemProperties(Properties, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @summary Gets a list of system level actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemAllowedActions(options?: any) {
      return SystemApiFp(configuration).getSystemAllowedActions(options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Get SystemInformation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemInfo(options?: any) {
      return SystemApiFp(configuration).getSystemInfo(options)(fetch, basePath);
    },
    /**
     *
     * @summary Gets the System Policies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemPolicies(options?: any) {
      return SystemApiFp(configuration).getSystemPolicies(options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary Gets the Systems Properties (takes list of Property names to retrieve the values)
     * @param {Array<string>} [properties] Names for the Properties to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemProperties(properties?: Array<string>, options?: any) {
      return SystemApiFp(configuration).getSystemProperties(
        properties,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the System's Policies.
     * @param {SystemPolicy} SystemPolicy The SystemPolicy object that contains settings to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSystemPolicies(SystemPolicy: SystemPolicy, options?: any) {
      return SystemApiFp(configuration).setSystemPolicies(
        SystemPolicy,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary Updates the System Properties with the given property list.
     * @param {Array<Property>} Properties Definition of the SystemProperties that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSystemProperties(Properties: Array<Property>, options?: any) {
      return SystemApiFp(configuration).updateSystemProperties(
        Properties,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
  /**
   *
   * @summary Gets a list of system level actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public getSystemAllowedActions(options?: any) {
    return SystemApiFp(this.configuration).getSystemAllowedActions(options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Get SystemInformation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public getSystemInfo(options?: any) {
    return SystemApiFp(this.configuration).getSystemInfo(options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the System Policies.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public getSystemPolicies(options?: any) {
    return SystemApiFp(this.configuration).getSystemPolicies(options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary Gets the Systems Properties (takes list of Property names to retrieve the values)
   * @param {Array<string>} [properties] Names for the Properties to be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public getSystemProperties(properties?: Array<string>, options?: any) {
    return SystemApiFp(this.configuration).getSystemProperties(
      properties,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the System's Policies.
   * @param {SystemPolicy} SystemPolicy The SystemPolicy object that contains settings to apply.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public setSystemPolicies(SystemPolicy: SystemPolicy, options?: any) {
    return SystemApiFp(this.configuration).setSystemPolicies(
      SystemPolicy,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Updates the System Properties with the given property list.
   * @param {Array<Property>} Properties Definition of the SystemProperties that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public updateSystemProperties(Properties: Array<Property>, options?: any) {
    return SystemApiFp(this.configuration).updateSystemProperties(
      Properties,
      options
    )(this.fetch, this.basePath);
  }
}
